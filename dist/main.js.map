{"version":3,"file":"main.js","mappings":"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","sources":["webpack://resumablejs/webpack/universalModuleDefinition","webpack://resumablejs/./src/resumable.ts","webpack://resumablejs/./src/resumableHelpers.ts","webpack://resumablejs/./src/resumableFile.ts","webpack://resumablejs/./src/resumableChunk.ts","webpack://resumablejs/./src/resumableEventHandler.ts","webpack://resumablejs/webpack/bootstrap","webpack://resumablejs/webpack/before-startup","webpack://resumablejs/webpack/startup","webpack://resumablejs/webpack/after-startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"resumablejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"resumablejs\"] = factory();\n\telse\n\t\troot[\"resumablejs\"] = factory();\n})(this, function() {\nreturn ","/*\n* MIT Licensed\n*\n* For all code added/modified until Sep 24, 2020\n* (see original repo as original code was split up into multiple files)\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*\n* For all code added/modified since Sep 24, 2020\n* https://www.pointcloudtechnology.com/en/\n* https://github.com/pointcloudtechnology/resumable.js\n* For contact (not the sole author): Marcel Wendler, https://github.com/UniquePanda, marcel.wendler@pointcloudtechnology.com\n*/\n\nimport Helpers from './resumableHelpers';\nimport ResumableFile from './resumableFile';\nimport ResumableEventHandler from './resumableEventHandler';\nimport {ExtendedFile, ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/**\n * An instance of a resumable upload handler that contains one or multiple files which should be uploaded in chunks.\n */\nexport class Resumable extends ResumableEventHandler {\n  private opts: ResumableConfiguration;\n  /**\n   * An object that contains one entry for every file category. The key is the category name, the value is an array of\n   * all ResumableFiles of that category that were added to this instance.\n   */\n  private files: {[key: string]: ResumableFile[]} = {};\n  /**\n   * Contains all file categories for which the upload was not yet completed.\n   */\n  private uncompletedFileCategories: string[] = [];\n  private validators: {[fileType: string]: Function} = {};\n  private support: boolean;\n\n  // Configuration Options\n  clearInput: boolean = true;\n  dragOverClass: string = 'dragover';\n  fileCategories: string[] = [];\n  defaultFileCategory: string | null = 'default';\n  fileTypes: string[] | {[fileCategory: string]: string[]} = [];\n  fileTypeErrorCallback: Function = (file) => {\n    alert(`${file.fileName || file.name} has an unsupported file type.`);\n  };\n  _generateUniqueIdentifier: Function = null;\n  maxFileSize?: number;\n  maxFileSizeErrorCallback: Function = (file) => {\n    alert(file.fileName || file.name + ' is too large, please upload files less than ' +\n      Helpers.formatSize(this.maxFileSize) + '.');\n  };\n  maxFiles?: number;\n  maxFilesErrorCallback: Function = (files) => {\n    var maxFiles = this.maxFiles;\n    alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n  };\n  minFileSize: number = 1;\n  minFileSizeErrorCallback: Function = (file) => {\n    alert(file.fileName || file.name + ' is too small, please upload files larger than ' +\n      Helpers.formatSize(this.minFileSize) + '.');\n  };\n  prioritizeFirstAndLastChunk: boolean = false;\n  fileValidationErrorCallback: Function = (file) => {};\n  simultaneousUploads: number = 3;\n\n  constructor(options: ResumableConfiguration = {}) {\n    super();\n    this.setInstanceProperties(options);\n    this.opts = options;\n    this.checkSupport();\n  }\n\n  /**\n   * Check whether the current browser supports the essential functions for the package to work.\n   * The method checks if these features are supported:\n   * - File object type\n   * - Blob object type\n   * - FileList object type\n   * - slicing files\n   */\n  private checkSupport(): void {\n    this.support =\n      File !== undefined &&\n      Blob !== undefined &&\n      FileList !== undefined &&\n      !!Blob.prototype.slice;\n    if (!this.support) {\n      throw new Error('Not supported by Browser');\n    }\n  }\n\n  /**\n   * Assign the attributes of this instance via destructuring of the options object.\n   */\n  protected setInstanceProperties(options: ResumableConfiguration) {\n    Object.assign(this, options);\n\n    // Explicitly test for null because other falsy values could be used as default.\n    if (this.defaultFileCategory === null) {\n      if (this.fileCategories.length === 0) {\n        throw new Error('If no default category is set, at least one file category must be defined.');\n      }\n    } else if (!this.fileCategories.includes(this.defaultFileCategory)) {\n      this.fileCategories.push(this.defaultFileCategory);\n    } else {\n      console.warn('Default file category already part of file categories array. Will not be added again.');\n    }\n\n    // To avoid any problems if the same category was added twice, we use the following loop to also deduplicate the\n    // file categories.\n    const deduplicatedFileCategories = [];\n    this.fileCategories.forEach((fileCategory) => {\n      if (this.files[fileCategory]) {\n        return;\n      }\n\n      this.files[fileCategory] = [];\n      this.uncompletedFileCategories.push(fileCategory);\n      deduplicatedFileCategories.push(fileCategory);\n    });\n\n    this.fileCategories = deduplicatedFileCategories.slice();\n\n    // Create/Check file types object.\n    if (Array.isArray(this.fileTypes)) {\n      // If fileTypes are given as an array, these types should be used for all file categores.\n      // Create the file types object and assign the given array to every file category.\n      const fileTypes = this.fileTypes.slice();\n\n      this.fileTypes = {};\n      this.fileCategories.forEach((fileCategory) => {\n        this.fileTypes[fileCategory] = fileTypes.slice();\n      });\n    } else {\n      const fileTypeCategories = Object.keys(this.fileTypes);\n      this.fileCategories.forEach((fileCategory) => {\n        if (!fileTypeCategories.includes(fileCategory)) {\n          console.warn('File category \"' + fileCategory + '\" not part of fileTypes object. Assuming empty array (which allows all file types).');\n        }\n\n        this.fileTypes[fileCategory] = [];\n      });\n    }\n\n    this.sanitizeFileTypes();\n  }\n\n  private sanitizeFileTypes(): void {\n    // For good behaviour we do some sanitizing. Remove spaces and dots and lowercase all.\n    Object.keys(this.fileTypes).forEach((fileCategory) => {\n      this.fileTypes[fileCategory] = this.fileTypes[fileCategory].map((type) => type.replace(/[\\s.]/g, '').toLowerCase());\n    });\n  }\n\n  private throwIfUnknownFileCategory(fileCategory: string): void {\n    if (!this.fileCategories.includes(fileCategory)) {\n      throw new Error('Unknown file category: ' + fileCategory);\n    }\n  }\n\n  /**\n   * Transforms a single fileEntry or directoryEntry item into a list of File objects this method is used to convert\n   * entries found inside dragged-and-dropped directories.\n   * @param {Object} item item to upload, may be file or directory entry\n   * @param {string} path current file path\n   */\n  private async mapDirectoryItemToFile(item: FileSystemEntry, path: string): Promise<File[]> {\n    if (item.isFile) {\n      // file entry provided\n      const file = await new Promise(\n        (resolve, reject) => (item as FileSystemFileEntry).file(resolve, reject)\n      ) as ExtendedFile;\n      file.relativePath = path + file.name;\n      return [file];\n    } else if (item.isDirectory) {\n      // directory entry provided\n      return await this.processDirectory(item as FileSystemDirectoryEntry, path + item.name + '/');\n    } else if (item instanceof File) {\n      return [item];\n    }\n\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\n    return [];\n  }\n\n  /**\n   * Transforms a single DataTransfer item into a File object. This may include either extracting the given file or\n   * all files inside the provided directory.\n   * @param item item to upload, may be file or directory entry\n   * @param path current file path\n   */\n  private async mapDragItemToFile(item: DataTransferItem, path: string): Promise<File[]> {\n    let entry = item.webkitGetAsEntry();\n    if (entry.isDirectory) {\n      return await this.processDirectory(entry as FileSystemDirectoryEntry, path + entry.name + '/');\n    }\n\n    let file = item.getAsFile();\n    if (file instanceof File) {\n      (file as ExtendedFile).relativePath = path + file.name;\n      return [file];\n    }\n\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\n    return [];\n  }\n\n  /**\n   * Recursively traverse a directory and collect files to upload\n   */\n  private processDirectory(directory: FileSystemDirectoryEntry, path: string): Promise<File[]> {\n    return new Promise((resolve, reject) => {\n      const dirReader = directory.createReader();\n      let allEntries = [];\n\n      const readEntries = (): void => {\n        dirReader.readEntries(async (entries: FileSystemEntry[]): Promise<void> => {\n          // Read the files batch-wise (in chrome e.g. 100 at a time)\n          if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            return readEntries();\n          }\n\n          // After collecting all files, map all fileEntries to File objects\n          allEntries = allEntries.map((entry) => {\n            return this.mapDirectoryItemToFile(entry, path);\n          });\n          // Wait until all files are collected.\n          resolve(await Promise.all(allEntries));\n        }, reject);\n      };\n\n      readEntries();\n    });\n  }\n\n  /**\n   * If \"assignDrop\" was used to assign the drop events to an element, we automatically add the \"dragOverClass\" CSS\n   * class to the element when a file is dropped onto it. In this case, we have to remove that class again before\n   * calling \"onDrop()\".\n   * If \"onDrop()\" is called from \"handleDropEvent()\" this is not needed.\n   */\n  private removeDragOverClassAndCallOnDrop(e: DragEvent): Promise<void> {\n    const domNode: HTMLElement = e.currentTarget as HTMLElement;\n    domNode.classList.remove(this.dragOverClass);\n    const fileCategory = domNode.getAttribute('resumable-file-category');\n\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    return this.onDrop(e, fileCategory);\n  }\n\n  /**\n   * Handle the event when a new file was provided via drag-and-drop\n   */\n  private async onDrop(e: DragEvent, fileCategory: string = this.defaultFileCategory): Promise<void> {\n    Helpers.stopEvent(e);\n\n    let items = [];\n\n    //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n    if (e.dataTransfer && e.dataTransfer.items) {\n      items = [...e.dataTransfer.items as any];\n    }\n    //else handle them as files\n    else if (e.dataTransfer && e.dataTransfer.files) {\n      items =  [...e.dataTransfer.files as any];\n    }\n\n    if (!items.length) {\n      return; // nothing to do\n    }\n    this.fire('fileProcessingBegin', items, fileCategory);\n    let promises = items.map((item) => this.mapDragItemToFile(item, ''));\n    let files = Helpers.flattenDeep(await Promise.all(promises));\n    if (files.length) {\n      // at least one file found\n      this.appendFilesFromFileList(files, e, fileCategory);\n    }\n  }\n\n  /**\n   * Handle the event when a drag-and-drop item leaves the area of assigned drag-and-drop area\n   */\n  private onDragLeave(e: DragEvent): void {\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\n  }\n\n  /**\n   * Handle the event when a drag-and-drop item enters the area of assigned drag-and-drop area\n   */\n  private onDragOverEnter(e: DragEvent): void {\n    e.preventDefault();\n    let dt = e.dataTransfer;\n    if (dt.types.includes('Files')) { // only for file drop\n      e.stopPropagation();\n      dt.dropEffect = 'copy';\n      dt.effectAllowed = 'copy';\n      (e.currentTarget as HTMLElement).classList.add(this.dragOverClass);\n    } else {\n      dt.dropEffect = 'none';\n      dt.effectAllowed = 'none';\n    }\n  };\n\n  /**\n   * Validate and clean a list of files. This includes the removal of duplicates, a check whether the file type is\n   * allowed and custom validation functions defined per file type.\n   * @param {ExtendedFile[]} files A list of File instances that were previously extended with a uniqueIdentifier\n   * @param fileCategory The file category that has been provided for the files. Defaults to `defaultFileCategory`.\n   */\n  private async validateFiles(files: ExtendedFile[], fileCategory: string = this.defaultFileCategory): Promise<ExtendedFile[]> {\n    if (!this.fileCategories.includes(fileCategory)) {\n      this.fire('fileProcessingFailed', undefined, 'unknownFileCategory', fileCategory);\n      return;\n    }\n\n    // Remove files that are duplicated in the original array, based on their unique identifiers\n    let uniqueFiles = Helpers.uniqBy(files,\n      (file) => file.uniqueIdentifier,\n      (file) => this.fire('fileProcessingFailed', file, 'duplicate', fileCategory),\n    );\n\n    const resumableFiles = this.files[fileCategory];\n    let validationPromises = uniqueFiles.map(async (file) => {\n      // Check if the file has already been added (based on its unique identifier).\n      if (resumableFiles.some((addedFile) => addedFile.uniqueIdentifier === file.uniqueIdentifier)) {\n        this.fire('fileProcessingFailed', file, 'duplicate', fileCategory);\n        return false;\n      }\n\n      let fileType: string = file.type.toLowerCase();\n      let fileExtension = file.name.split('.').pop().toLowerCase();\n\n      if (this.fileTypes[fileCategory].length > 0) {\n        const fileTypeFound = this.fileTypes[fileCategory].some((type) => {\n          // Check whether the extension inside the filename is an allowed file type\n          return fileExtension === type ||\n            // If MIME type, check for wildcard or if extension matches the file's tile type\n            type.includes('/') && (\n              type.includes('*') &&\n              fileType.substring(0, type.indexOf('*')) === type.substring(0, type.indexOf('*')) ||\n              fileType === type\n            );\n        });\n        if (!fileTypeFound) {\n          this.fire('fileProcessingFailed', file, 'fileType', fileCategory);\n          this.fileTypeErrorCallback(file);\n          return false;\n        }\n      }\n\n      // Validate the file size against minimum and maximum allowed sizes\n      if (this.minFileSize !== undefined && file.size < this.minFileSize) {\n        this.fire('fileProcessingFailed', file, 'minFileSize', fileCategory);\n        this.minFileSizeErrorCallback(file);\n        return false;\n      }\n      if (this.maxFileSize !== undefined && file.size > this.maxFileSize) {\n        this.fire('fileProcessingFailed', file, 'maxFileSize', fileCategory);\n        this.maxFileSizeErrorCallback(file);\n        return false;\n      }\n\n      // Apply a custom validator based on the file extension\n      if (fileExtension in this.validators && !await this.validators[fileExtension](file, fileCategory)) {\n        this.fire('fileProcessingFailed', file, 'validation', fileCategory);\n        this.fileValidationErrorCallback(file);\n        return false;\n      }\n\n      return true;\n    });\n\n    const results = await Promise.all(validationPromises);\n\n    // Only include files that passed their validation tests\n    return files.filter((_v, index) => results[index]);\n  }\n\n  /**\n   * Add an array of files to this instance's file list (of the file category, if given) by creating new ResumableFiles.\n   * This includes a validation and deduplication of the provided array.\n   * @param fileList An array containing File objects\n   * @param event The event with which the fileList was provided\n   * @param fileCategory The file category that has been provided for the file. Defaults to `defaultFileCategory`.\n   */\n  private async appendFilesFromFileList(fileList: File[], event: Event, fileCategory: string = this.defaultFileCategory): Promise<boolean> {\n    const resumableFiles = this.files[fileCategory];\n\n    if (!resumableFiles) {\n      this.fire('fileProcessingFailed', undefined, 'unknownFileCategory', fileCategory);\n      return false;\n    }\n\n    const allResumableFiles = this.getFilesOfAllCategories();\n\n    // check for uploading too many files\n    if (this.maxFiles !== undefined && this.maxFiles < fileList.length + allResumableFiles.length) {\n      // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n      if (this.maxFiles === 1 && allResumableFiles.length === 1 && fileList.length === 1) {\n        this.removeFile(resumableFiles[0]);\n      } else {\n        this.fire('fileProcessingFailed', undefined, 'maxFiles', fileCategory);\n        this.maxFilesErrorCallback(fileList);\n        return false;\n      }\n    }\n\n    // Add the unique identifier for every new file.\n    // Since this might return a promise, we have to wait until it completed.\n    const filesWithUniqueIdentifiers = await Promise.all(fileList.map(async (file: ExtendedFile): Promise<ExtendedFile> => {\n      file.uniqueIdentifier = await this.generateUniqueIdentifier(file, event, fileCategory);\n      return file;\n    }));\n\n    // Validate the files and remove duplicates\n    const validatedFiles = await this.validateFiles(filesWithUniqueIdentifiers, fileCategory);\n\n    let skippedFiles = filesWithUniqueIdentifiers.filter((file) => !validatedFiles.includes(file));\n\n    for (const file of validatedFiles) {\n      let f = new ResumableFile(file, file.uniqueIdentifier, fileCategory, this.opts);\n      f.on('chunkingStart', (...args) => this.handleChunkingStart(args, fileCategory));\n      f.on('chunkingProgress', (...args) => this.handleChunkingProgress(args, fileCategory));\n      f.on('chunkingComplete', (...args) => this.handleChunkingComplete(args, fileCategory));\n      f.on('chunkSuccess', (...args) => this.handleChunkSuccess(args, fileCategory));\n      f.on('chunkError', (...args) => this.handleChunkError(args, fileCategory));\n      f.on('chunkCancel', (...args) => this.handleChunkCancel(args, fileCategory));\n      f.on('chunkRetry', (...args) => this.handleChunkRetry(args, fileCategory));\n      f.on('chunkProgress', (...args) => this.handleChunkProgress(args, fileCategory));\n      f.on('fileProgress', (...args) => this.handleFileProgress(args, fileCategory));\n      f.on('fileError', (...args) => this.handleFileError(args, fileCategory));\n      f.on('fileSuccess', (...args) => this.handleFileSuccess(args, fileCategory));\n      f.on('fileCancel', (...args) => this.handleFileCancel(args, fileCategory));\n      f.on('fileRetry', (...args) => this.handleFileRetry(args, fileCategory));\n      this.files[fileCategory].push(f);\n      this.fire('fileAdded', f, event, fileCategory);\n    }\n\n    // all files processed, trigger event\n    if (!validatedFiles.length && !skippedFiles.length) {\n      // no succeeded files, just skip\n      return;\n    }\n    this.fire('filesAdded', validatedFiles, skippedFiles, fileCategory);\n  }\n\n  /**\n   * Generate a new unique identifier for a given file either with a default helper function or with a custom\n   * generator function.\n   * @param file The file as an HTML 5 File object\n   * @param event The event with which the file was provided originally\n   * @param fileCategory The file category that has been provided for the file. Defaults to `defaultFileCategory`.\n   */\n  private generateUniqueIdentifier(file: File, event: Event, fileCategory: string = this.defaultFileCategory): string {\n    return typeof this._generateUniqueIdentifier === 'function' ?\n      this._generateUniqueIdentifier(file, event, fileCategory) : Helpers.generateUniqueIdentifier(file);\n  }\n\n  /**\n   * Queue a new chunk to be uploaded that is currently awaiting upload.\n   */\n  private uploadNextChunk(): void {\n    const allResumableFiles = this.getFilesOfAllCategories();\n\n    // In some cases (such as videos) it's really handy to upload the first\n    // and last chunk of a file quickly; this lets the server check the file's\n    // metadata and determine if there's even a point in continuing.\n    if (this.prioritizeFirstAndLastChunk) {\n      for (const file of allResumableFiles) {\n        if (file.chunks.length && file.chunks[0].status === ResumableChunkStatus.PENDING) {\n          file.chunks[0].send();\n          return;\n        }\n        if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status === ResumableChunkStatus.PENDING) {\n          file.chunks[file.chunks.length - 1].send();\n          return;\n        }\n      }\n    }\n\n    // Now, simply look for the next best thing to upload\n    for (const file of allResumableFiles) {\n      if (file.upload()) return;\n    }\n  }\n\n  /**\n   * Returns all ResumableFiles of all file categories.\n   * The files are ordered by the order of the file categories in `this.fileCategories`. Files of the first category\n   * are added first, files of the second category are added second etc.\n   *\n   * @returns {ResumableFile[]} Array of all ResumableFiles that are stored for any category.\n   */\n  private getFilesOfAllCategories(): ResumableFile[] {\n    let allFiles = [];\n\n    this.fileCategories.forEach((fileCategory) => {\n      allFiles = allFiles.concat(this.files[fileCategory]);\n    });\n\n    return allFiles;\n  }\n\n  /**\n   *  PUBLIC METHODS FOR RESUMABLE.JS\n   *  This section only includes methods that should be callable from external packages.\n   */\n\n  /**\n   * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\n   *\n   * @param domNodes The dom nodes to which the browse action should be assigned (can be an array or a single dom node).\n   * @param isDirectory If true, directories can be added via the file picker (Chrome only).\n   * @param fileCategory The file category that will be assigned to all added files. Defaults to `defaultFileCategory`.\n   */\n  assignBrowse(domNodes: HTMLElement | HTMLElement[], isDirectory: boolean = false, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n    for (const domNode of domNodes) {\n      let input;\n      if (domNode instanceof HTMLInputElement && domNode.type === 'file') {\n        input = domNode;\n      } else {\n        input = document.createElement('input');\n        input.setAttribute('type', 'file');\n        input.style.display = 'none';\n        domNode.addEventListener('click', () => {\n          input.style.opacity = 0;\n          input.style.display = 'block';\n          input.focus();\n          input.click();\n          input.style.display = 'none';\n        }, false);\n        domNode.appendChild(input);\n      }\n      if (this.maxFiles !== 1) {\n        input.setAttribute('multiple', 'multiple');\n      } else {\n        input.removeAttribute('multiple');\n      }\n      if (isDirectory) {\n        input.setAttribute('webkitdirectory', 'webkitdirectory');\n      } else {\n        input.removeAttribute('webkitdirectory');\n      }\n\n      // Call setFileTypes() without changing the file types to just update the file types which are accepted by the\n      // input dom element.\n      this.setFileTypes(this.fileTypes[fileCategory], input, fileCategory);\n\n      input.addEventListener(\n        'change',\n        (event: InputEvent) => {\n          this.handleChangeEvent(event, fileCategory);\n        },\n        false\n      );\n    }\n  }\n\n  /**\n   * Assign one or more DOM nodes as a drop target.\n   *\n   * @param domNodes The dom nodes to which the drop action should be assigned (can be an array or a single dom node).\n   * @param fileCategory The file category that will be assigned to all added files. Defaults to `defaultFileCategory`. \n   */\n  assignDrop(domNodes: HTMLElement | HTMLElement[], fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n\n    for (const domNode of domNodes) {\n      if (fileCategory) {\n        // Assign the file category as attribute to the Dom node. This is needed because this information needs to be read\n        // in the \"drop\" event listener, but we can't pass a value into the listener directly. Unfortunately we can't use\n        // an arrow function as a wrapper here (as done in assignBrowse()) because we need to be able to access the same\n        // function in unAssignDrop().\n        domNode.setAttribute('resumable-file-category', fileCategory);\n      }\n\n      domNode.addEventListener('dragover', this.onDragOverEnter.bind(this), false);\n      domNode.addEventListener('dragenter', this.onDragOverEnter.bind(this), false);\n      domNode.addEventListener('dragleave', this.onDragLeave.bind(this), false);\n      domNode.addEventListener('drop', this.removeDragOverClassAndCallOnDrop.bind(this), false);\n    }\n  }\n\n  /**\n   * Remove one or more DOM nodes as a drop target.\n   */\n  unAssignDrop(domNodes: HTMLElement | HTMLElement[]): void {\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n\n    for (const domNode of domNodes) {\n      domNode.removeEventListener('dragover', this.onDragOverEnter.bind(this));\n      domNode.removeEventListener('dragenter', this.onDragOverEnter.bind(this));\n      domNode.removeEventListener('dragleave', this.onDragLeave.bind(this));\n      domNode.removeEventListener('drop', this.removeDragOverClassAndCallOnDrop.bind(this));\n    }\n  }\n\n  /**\n   * Set the file types allowed to upload.\n   * Per default the file types are updated for the default file category.\n   * Optionally pass a dom node on which the accepted file types should be updated as well.\n   *\n   * @param fileTypes String array of all allowed file types\n   * @param domNode An optional HTMLInputElement for which the \"accepted\" attribute should be updated accordingly.\n   * @param fileCategory The file category for which the file types should be updated. Defaults to `defaultFileCategory`.\n   */\n  setFileTypes(fileTypes: string[], domNode: HTMLInputElement = null, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    if (domNode && domNode.type !== 'file') {\n      throw new Error('Dom node is not a file input.');\n    }\n\n    // Store new file types and sanitize them.\n    this.fileTypes[fileCategory] = fileTypes;\n    this.sanitizeFileTypes();\n\n    if (domNode) {\n      if (fileTypes.length >= 1) {\n        // Set the new file types as \"accepted\" by the given dom node.\n        domNode.setAttribute('accept', this.fileTypes[fileCategory].map((type) => {\n          if (type.match(/^[^.][^/]+$/)) {\n            type = '.' + type;\n          }\n          return type;\n        }).join(','));\n      } else {\n        // Make all file types \"accepted\" by the given dom node.\n        domNode.removeAttribute('accept');\n      }\n    }\n  }\n\n  /**\n   * Check whether any files are currently uploading\n   */\n  get isUploading(): boolean {\n    return this.getFilesOfAllCategories().some((file) => file.isUploading);\n  }\n\n  /**\n   * Start or resume the upload of the provided files by initiating the upload of the first chunk\n   */\n  upload(): void {\n    // Make sure we don't start too many uploads at once\n    if (this.isUploading) return;\n    // Kick off the queue\n    this.fire('uploadStart');\n    for (let num = 1; num <= this.simultaneousUploads; num++) {\n      this.uploadNextChunk();\n    }\n  }\n\n  /**\n   * Pause the upload\n   */\n  pause(): void {\n    // Resume all chunks currently being uploaded\n    for (const file of this.getFilesOfAllCategories()) {\n      file.abort();\n    }\n    this.fire('pause');\n  };\n\n  /**\n   * Cancel uploading and reset all files to their initial states\n   */\n  cancel(): void {\n    this.fire('beforeCancel');\n    const allFiles = this.getFilesOfAllCategories();\n    allFiles.forEach((file) => {\n      file.cancel();\n    });\n\n    this.fire('cancel');\n  };\n\n  /**\n   * Return the progress of the current upload as a float between 0 and 1\n   */\n  progress(): number {\n    let totalDone = this.getFilesOfAllCategories().reduce((accumulator, file) => accumulator + file.size * file.progress(), 0);\n    let totalSize = this.getSize();\n    return totalSize > 0 ? totalDone / totalSize : 0;\n  };\n\n  /**\n   * Add a HTML5 File object to the list of files.\n   */\n  addFile(file: File, event: Event, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    this.appendFilesFromFileList([file], event, fileCategory);\n  };\n\n  /**\n   * Add a list of HTML5 File objects to the list of files.\n   */\n  addFiles(files: File[], event: Event, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    this.appendFilesFromFileList(files, event, fileCategory);\n  };\n\n  /**\n   * Add a validator function for the given file type. This can e.g. be used to read the file and validate\n   * checksums based on certain properties.\n   * @param fileType The file extension for the given validator\n   * @param validator A callback function that should be called when validating files with the given type\n   */\n  addFileValidator(fileType: string, validator: Function): void {\n    if (fileType in this.validators) {\n      console.warn(`Overwriting validator for file type: ${fileType}`);\n    }\n    this.validators[fileType] = validator;\n  }\n\n  /**\n   * Remove the given resumable file from the file list (of its corresponding file category).\n   */\n  removeFile(file: ResumableFile): void {\n    const fileCategory = file.fileCategory;\n    const fileIndex = this.files[fileCategory].findIndex(\n      (fileFromArray) => fileFromArray.uniqueIdentifier === file.uniqueIdentifier\n    );\n\n    if (fileIndex >= 0) {\n      this.files[fileCategory].splice(fileIndex, 1);\n    }\n  };\n\n  /**\n   * Retrieve a ResumableFile object from the file list by its unique identifier.\n   */\n  getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile {\n    return this.getFilesOfAllCategories().find((file) => file.uniqueIdentifier === uniqueIdentifier);\n  };\n\n  /**\n   * Get the combined size of all files for the upload\n   */\n  getSize(): number {\n    return this.getFilesOfAllCategories().reduce((accumulator, file) => accumulator + file.size, 0);\n  }\n\n  /**\n   * Call the event handler for a DragEvent (when a file is dropped on a drop area).\n   */\n  handleDropEvent(e: DragEvent, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    this.onDrop(e, fileCategory);\n  }\n\n  /**\n   * Call the event handler for an InputEvent (i.e. received one or multiple files).\n   */\n  handleChangeEvent(e: InputEvent, fileCategory: string = this.defaultFileCategory): void {\n    this.throwIfUnknownFileCategory(fileCategory);\n\n    const eventTarget = e.target as HTMLInputElement;\n    this.fire('fileProcessingBegin', eventTarget.files, fileCategory);\n    this.appendFilesFromFileList([...eventTarget.files as any], e, fileCategory);\n    if (this.clearInput) {\n      eventTarget.value = '';\n    }\n  }\n\n  /**\n   * Check whether the upload is completed (if all files of a category are uploaded and if all files in general are\n   * uploaded).\n   */\n  checkUploadComplete(): void {\n    // If no files were added, there is no upload that could be complete.\n    if (this.getFilesOfAllCategories().length === 0) {\n      return;\n    }\n\n    const stillUncompletedFileCategories = [];\n    this.uncompletedFileCategories.forEach((fileCategory) => {\n      // If category is empty, no upload will happen, so no \"complete\" event needs to be fired.\n      if (this.files[fileCategory].length == 0) {\n        return;\n      }\n\n      if (this.files[fileCategory].every((file) => file.isComplete)) {\n        this.fire('categoryComplete', fileCategory);\n      } else {\n        stillUncompletedFileCategories.push(fileCategory);\n      }\n    });\n\n    this.uncompletedFileCategories = stillUncompletedFileCategories;\n\n    if (this.uncompletedFileCategories.length === 0) {\n      // All chunks have been uploaded, complete\n      this.fire('complete');\n    }\n  }\n\n  /**\n   * Event Handlers: This section should only include methods that are used to\n   * handle events coming from the files or chunks.\n   */\n\n  /**\n   * The event handler when the chunking of a file was started\n   */\n  private handleChunkingStart(args: any[], fileCategory: string): void {\n    this.fire('chunkingStart', ...args, fileCategory);\n  }\n\n  /**\n   * The event handler when there was any progress while chunking a file\n   */\n  private handleChunkingProgress(args: any[], fileCategory: string): void {\n    this.fire('chunkingProgress', ...args, fileCategory);\n  }\n\n  /**\n   * The event handler when the chunking of a file was completed\n   */\n  private handleChunkingComplete(args: any[], fileCategory: string): void {\n    this.fire('chunkingComplete', ...args, fileCategory);\n  }\n\n  /**\n   * The event handler when a chunk was uploaded successfully\n   */\n  private handleChunkSuccess(args: any[], fileCategory: string): void {\n    this.fire('chunkSuccess', ...args, fileCategory);\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when an error happened while uploading a chunk\n   */\n  private handleChunkError(args: any[], fileCategory: string): void {\n    this.fire('chunkError', ...args, fileCategory);\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when an the upload of a chunk was canceled\n   */\n  private handleChunkCancel(args: any[], fileCategory: string): void {\n    this.fire('chunkCancel', ...args, fileCategory);\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when the upload of a chunk is being retried\n   */\n  private handleChunkRetry(args: any[], fileCategory: string): void {\n    this.fire('chunkRetry', ...args, fileCategory);\n  }\n\n  /**\n   * The event handler when there is any progress while uploading a chunk\n   */\n  private handleChunkProgress(args: any[], fileCategory: string): void {\n    this.fire('chunkProgress', ...args, fileCategory);\n  }\n\n  /**\n   * The event handler when an error occurred during the upload of a file\n   */\n  private handleFileError(args: any[], fileCategory: string): void {\n    this.fire('fileError', ...args, fileCategory);\n    // 'error' event for backward compatibility ('fileError' was not fired in previous versions).\n    // If there will be other errors besides 'fileError's at some point, the 'error' event (as a general \"catch all\n    // errors\" event) would make more sense.\n    this.fire('error', args[1], args[0], fileCategory);\n  }\n\n  /**\n   * The event handler when all chunks from a file were uploaded successfully\n   */\n  private handleFileSuccess(args: any[], fileCategory: string): void {\n    this.fire('fileSuccess', ...args, fileCategory);\n    this.checkUploadComplete();\n  }\n\n  /**\n   * The event handler when a file progress event was received\n   */\n  private handleFileProgress(args: any[], fileCategory: string): void {\n    this.fire('fileProgress', ...args, fileCategory);\n    this.fire('progress');\n  }\n\n  /**\n   * The event handler when the upload of a file was canceled\n   */\n  private handleFileCancel(args: any[], fileCategory: string): void {\n    this.fire('fileCancel', ...args, fileCategory);\n    this.removeFile(args[0])\n  }\n\n  /**\n   * The event handler, when the retry of a file was initiated\n   */\n  private handleFileRetry(args: any[], fileCategory: string): void {\n    this.fire('fileRetry', ...args, fileCategory);\n    this.upload();\n  }\n}\n","/*\n* MIT Licensed\n*\n* For all code added/modified until Sep 24, 2020\n* (see original repo as original code was split up into multiple files)\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*\n* For all code added/modified since Sep 24, 2020\n* https://www.pointcloudtechnology.com/en/\n* https://github.com/pointcloudtechnology/resumable.js\n* For contact (not the sole author): Marcel Wendler, https://github.com/UniquePanda, marcel.wendler@pointcloudtechnology.com\n*/\n\n// INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\nimport {ExtendedFile} from \"./types/types\";\n\nexport default class ResumableHelpers {\n  /**\n   * Stop the propagation and default behavior of the given event `e`.\n   */\n  static stopEvent(e: Event): void {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /**\n   * Generate a unique identifier for the given file based on its size, filename and relative path.\n   * @param {ExtendedFile} file The file for which the identifier should be generated\n   * @returns {string} The unique identifier for the given file object\n   */\n  static generateUniqueIdentifier(file: ExtendedFile): string {\n    let relativePath = file.webkitRelativePath || file.relativePath || file.name;\n    // The '/' is used to display the relative path of the file. This information should be preserved\n    relativePath = relativePath.replace('/', '-');\n    // Remove special characters\n    return (file.size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n  }\n\n  /**\n   * Flatten the given array and all contained subarrays.\n   * Credit: {@link https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep}\n   */\n  static flattenDeep(array: any[]): any[] {\n    return Array.isArray(array)\n      ? array.reduce((a, b) => a.concat(this.flattenDeep(b)), [])\n      : [array];\n  }\n\n  /**\n   * Filter the given array based on the predicate inside `callback`\n   * and executes `errorCallback` for duplicate elements.\n   */\n  static uniqBy(array: any[], callback: Function, errorCallback: Function): any[] {\n    let seen = new Set();\n    return array.filter((item) => {\n      let k = callback(item);\n      if (seen.has(k)) {\n        errorCallback(item);\n        return false;\n      } else {\n        seen.add(k);\n        return true;\n      }\n    });\n  }\n\n  /**\n   * Format the size given in Bytes in a human readable format.\n   */\n  static formatSize(size: number): string {\n    if (size < 1024) {\n      return size + ' bytes';\n    }\n    if (size < 1024 * 1024) {\n      return (size / 1024.0).toFixed(0) + ' KB';\n    }\n    if (size < 1024 * 1024 * 1024) {\n      return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\n    }\n    return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\n  }\n\n  /**\n   * Get the target url for the specified request type and params\n   */\n  static getTarget(\n    requestType: string,\n    sendTarget: string,\n    testTarget: string,\n    params: object,\n    parameterNamespace: string = ''\n  ) {\n    let target = sendTarget;\n\n    if (requestType === 'test' && testTarget) {\n      target = testTarget === '/' ? sendTarget : testTarget;\n    }\n\n    let separator = target.indexOf('?') < 0 ? '?' : '&';\n    let joinedParams = Object.entries(params).map(([key, value]) => [\n      encodeURIComponent(parameterNamespace + key),\n      encodeURIComponent(value),\n    ].join('=')).join('&');\n\n    if (joinedParams) target = target + separator + joinedParams;\n\n    return target;\n  }\n}\n","/*\n* MIT Licensed\n*\n* For all code added/modified until Sep 24, 2020\n* (see original repo as original code was split up into multiple files)\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*\n* For all code added/modified since Sep 24, 2020\n* https://www.pointcloudtechnology.com/en/\n* https://github.com/pointcloudtechnology/resumable.js\n* For contact (not the sole author): Marcel Wendler, https://github.com/UniquePanda, marcel.wendler@pointcloudtechnology.com\n*/\n\nimport ResumableChunk from './resumableChunk';\nimport Helpers from './resumableHelpers';\nimport ResumableEventHandler from './resumableEventHandler';\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/**\n * A single file object that should be uploaded in multiple chunks\n */\nexport default class ResumableFile extends ResumableEventHandler {\n  private opts: ResumableConfiguration;\n  private _prevProgress: number = 0;\n  private isPaused: boolean = false;\n\n  file: File;\n  fileName: string;\n  size: number;\n  relativePath: string;\n  uniqueIdentifier: string;\n  fileCategory: string;\n  private _error: boolean;\n  chunks: ResumableChunk[] = [];\n  private chunkSize: number = 1024 * 1024; // 1 MB\n\n  constructor(file: File, uniqueIdentifier: string, fileCategory: string, options: object) {\n    super();\n    this.opts = options;\n    this.setInstanceProperties(options);\n    this.file = file;\n    this.fileName = file.name;\n    this.size = file.size;\n    this.relativePath = file.webkitRelativePath || this.fileName;\n    this.uniqueIdentifier = uniqueIdentifier;\n    this.fileCategory = fileCategory;\n    this._error = uniqueIdentifier !== undefined;\n\n    // Bootstrap file\n    this.fire('chunkingStart', this);\n    this.bootstrap();\n  }\n\n  /**\n   * Set the options provided inside the configuration object on this instance\n   */\n  protected setInstanceProperties(options: ResumableConfiguration) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * Stop current uploads for this file\n   */\n  abort(): void {\n    let abortCount = 0;\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\n        chunk.abort();\n        abortCount++;\n      }\n    }\n    if (abortCount > 0) this.fire('fileProgress', this, null);\n  }\n\n  /**\n   * Cancel uploading this file and remove it from the file list\n   */\n  cancel(): void {\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\n        chunk.abort();\n        this.fire('chunkCancel', chunk);\n      }\n    }\n    // Reset this file to be void\n    this.chunks = [];\n    this.fire('fileCancel', this);\n    this.fire('fileProgress', this, null);\n  }\n\n  /**\n   * Retry uploading this file\n   */\n  retry(): void {\n    this.bootstrap();\n    let firedRetry = false;\n    this.on('chunkingComplete', () => {\n      if (!firedRetry) this.fire('fileRetry', this, null);\n      firedRetry = true;\n    });\n  }\n\n  /**\n   * Prepare this file for a new upload, by dividing it into multiple chunks\n   */\n  bootstrap(): void {\n    const progressHandler = (message, chunk) => {\n      this.fire('chunkProgress', chunk, message);\n      this.fire('fileProgress', this, message);\n    };\n    const retryHandler = (message, chunk) => {\n      this.fire('chunkRetry', chunk, message);\n      this.fire('fileRetry', this, message);\n    }\n    const successHandler = (message, chunk) => {\n      if (this._error) return;\n      this.fire('chunkSuccess', chunk, message);\n      this.fire('fileProgress', this, message);\n      if (this.isComplete) {\n        this.fire('fileSuccess', this, message);\n      }\n    };\n    const errorHandler = (message, chunk) => {\n      this.fire('chunkError', chunk, message);\n      this.abort();\n      this._error = true;\n      this.chunks = [];\n      this.fire('fileError', this, message);\n    }\n\n    this.abort();\n    this._error = false;\n    // Rebuild stack of chunks from file\n    this.chunks = [];\n    this._prevProgress = 0;\n    const maxOffset = Math.max(Math.ceil(this.file.size / this.chunkSize), 1);\n    for (var offset = 0; offset < maxOffset; offset++) {\n      const chunk = new ResumableChunk(this, offset, this.opts);\n      chunk.on('chunkProgress', (message) => progressHandler(message, chunk));\n      chunk.on('chunkError', (message) => errorHandler(message, chunk));\n      chunk.on('chunkSuccess', (message) => successHandler(message, chunk));\n      chunk.on('chunkRetry', (message) => retryHandler(message, chunk));\n      this.chunks.push(chunk);\n      this.fire('chunkingProgress', this, offset / maxOffset);\n    }\n    this.fire('chunkingComplete', this);\n  }\n\n  /**\n   * Get the progress for uploading this file based on the progress of the individual file chunks\n   */\n  progress(): number {\n    if (this._error) return 1;\n    // Sum up progress across everything\n    var ret = 0;\n    var error = false;\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.ERROR) error = true;\n      ret += chunk.progress(true); // get chunk progress relative to entire file\n    }\n    ret = error ? 1 : (ret > 0.99999 ? 1 : ret);\n    ret = Math.max(this._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n    this._prevProgress = ret;\n    return ret;\n  }\n\n  /**\n   * Check whether at least one of this file's chunks is currently uploading\n   */\n  get isUploading(): boolean {\n    return this.chunks.some((chunk) => chunk.status === ResumableChunkStatus.UPLOADING);\n  }\n\n  /**\n   * Check whether all of this file's chunks completed their upload requests and whether it should be\n   * treated as completed.\n   */\n  get isComplete(): boolean {\n    return !this.chunks.some((chunk) =>\n      chunk.status === ResumableChunkStatus.PENDING || chunk.status === ResumableChunkStatus.UPLOADING);\n  }\n\n  /**\n   * Initiate the upload of a new chunk for this file. This function returns whether a new upload was started or not.\n   */\n  upload(): boolean {\n    if (this.isPaused) {\n      return false;\n    }\n\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.PENDING) {\n        chunk.send();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Mark a given number of chunks as already uploaded to the server.\n   * @param chunkNumber The index until which all chunks should be marked as completed\n   */\n  markChunksCompleted(chunkNumber: number): void {\n    if (!this.chunks || this.chunks.length <= chunkNumber) {\n      return;\n    }\n    for (let num = 0; num < chunkNumber; num++) {\n      this.chunks[num].markComplete();\n    }\n  }\n}\n","import Helpers from './resumableHelpers';\nimport ResumableEventHandler from './resumableEventHandler';\nimport ResumableFile from './resumableFile';\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/*\n* MIT Licensed\n*\n* For all code added/modified until Sep 24, 2020\n* (see original repo as original code was split up into multiple files)\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*\n* For all code added/modified since Sep 24, 2020\n* https://www.pointcloudtechnology.com/en/\n* https://github.com/pointcloudtechnology/resumable.js\n* For contact (not the sole author): Marcel Wendler, https://github.com/UniquePanda, marcel.wendler@pointcloudtechnology.com\n*/\n\n/**\n * A file chunk that contains all the data that for a single upload request\n */\nexport default class ResumableChunk extends ResumableEventHandler {\n  private fileObj: ResumableFile;\n  private fileObjSize: number;\n  private fileObjType: string;\n  private offset: number;\n  private lastProgressCallback: Date = new Date;\n  private tested: boolean = false;\n  private retries: number = 0;\n  private pendingRetry: boolean = false;\n  private isMarkedComplete: boolean = false;\n  private loaded: number = 0;\n  private startByte: number;\n  private endByte: number;\n  private xhr: XMLHttpRequest = null;\n\n  // Option properties\n  private chunkSize: number = 1024 * 1024; // 1 MB\n  private fileParameterName: string = 'file';\n  chunkNumberParameterName: string = 'resumableChunkNumber';\n  chunkSizeParameterName: string = 'resumableChunkSize';\n  currentChunkSizeParameterName: string = 'resumableCurrentChunkSize';\n  totalSizeParameterName: string = 'resumableTotalSize';\n  typeParameterName: string = 'resumableType';\n  identifierParameterName: string = 'resumableIdentifier';\n  fileCategoryParameterName: string = 'resumableFileCategory';\n  fileNameParameterName: string = 'resumableFilename';\n  relativePathParameterName: string = 'resumableRelativePath';\n  totalChunksParameterName: string = 'resumableTotalChunks';\n  throttleProgressCallbacks: number = 0.5;\n  query: object = {};\n  headers: object = {};\n  method: string = 'multipart';\n  uploadMethod: string = 'POST';\n  testMethod: string = 'GET';\n  parameterNamespace: string = '';\n  testChunks: boolean = true;\n  maxChunkRetries: number = 100;\n  chunkRetryInterval?: number = undefined;\n  permanentErrors: number[] = [400, 401, 403, 404, 409, 415, 500, 501];\n  withCredentials: boolean = false;\n  xhrTimeout: number = 0;\n  chunkFormat: string = 'blob';\n  setChunkTypeFromFile: boolean = false;\n  target: string = '/';\n  testTarget: string = '';\n\n\n  constructor(fileObj: ResumableFile, offset: number, options: ResumableConfiguration) {\n    super();\n    this.setInstanceProperties(options);\n    this.fileObj = fileObj;\n    this.fileObjSize = fileObj.size;\n    this.fileObjType = fileObj.file.type;\n    this.offset = offset;\n\n    // Computed properties\n    this.startByte = this.offset * this.chunkSize;\n    this.endByte = Math.min(this.fileObjSize, (this.offset + 1) * this.chunkSize);\n    this.xhr = null;\n  }\n\n  /**\n   * Set the options provided inside the configuration object on this instance\n   */\n  protected setInstanceProperties(options: ResumableConfiguration): void {\n    Object.assign(this, options);\n  }\n\n  /**\n   * Set the header values for the current XMLHttpRequest\n   */\n  setCustomHeaders(): void {\n    if (!this.xhr) {\n      return;\n    }\n    let customHeaders = this.headers;\n    if (customHeaders instanceof Function) {\n      customHeaders = customHeaders(this.fileObj, this);\n    }\n    for (const header in customHeaders) {\n      if (!customHeaders.hasOwnProperty(header)) continue;\n      this.xhr.setRequestHeader(header, customHeaders[header]);\n    }\n  }\n\n  /**\n   * Get query parameters for this chunk as an object, combined with custom parameters if provided\n   */\n  get formattedQuery(): object {\n    var customQuery = this.query;\n    if (typeof customQuery == 'function') customQuery = customQuery(this.fileObj, this);\n\n    // Add extra data to identify chunk\n    const extraData = {\n      // define key/value pairs for additional parameters\n      [this.chunkNumberParameterName]: this.offset + 1,\n      [this.chunkSizeParameterName]: this.chunkSize,\n      [this.currentChunkSizeParameterName]: this.endByte - this.startByte,\n      [this.totalSizeParameterName]: this.fileObjSize,\n      [this.typeParameterName]: this.fileObjType,\n      [this.identifierParameterName]: this.fileObj.uniqueIdentifier,\n      [this.fileCategoryParameterName]: this.fileObj.fileCategory,\n      [this.fileNameParameterName]: this.fileObj.fileName,\n      [this.relativePathParameterName]: this.fileObj.relativePath,\n      [this.totalChunksParameterName]: this.fileObj.chunks.length,\n    };\n    return {...extraData, ...customQuery};\n  }\n\n  /**\n   * Determine the status for this Chunk based on different parameters of the underlying XMLHttpRequest\n   */\n  get status(): ResumableChunkStatus {\n    if (this.pendingRetry) {\n      // if pending retry then that's effectively the same as actively uploading,\n      // there might just be a slight delay before the retry starts\n      return ResumableChunkStatus.UPLOADING;\n    } else if (this.isMarkedComplete) {\n      return ResumableChunkStatus.SUCCESS;\n    } else if (!this.xhr) {\n      return ResumableChunkStatus.PENDING;\n    } else if (this.xhr.readyState < 4) {\n      // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n      return ResumableChunkStatus.UPLOADING;\n    } else if (this.xhr.status === 200 || this.xhr.status === 201) {\n      // HTTP 200, 201 (created)\n      return ResumableChunkStatus.SUCCESS;\n    } else if (this.permanentErrors.includes(this.xhr.status) || this.retries >= this.maxChunkRetries) {\n      // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\n      return ResumableChunkStatus.ERROR;\n    } else {\n      // this should never happen, but we'll reset and queue a retry\n      // a likely case for this would be 503 service unavailable\n      this.abort();\n      return ResumableChunkStatus.PENDING;\n    }\n  };\n\n  /**\n   * Get the target url for the specified request type and the configured parameters of this chunk\n   * @param requestType The type of the request, either 'test' or 'upload'\n   */\n  getTarget(requestType: string): string {\n    return Helpers.getTarget(requestType, this.target, this.testTarget, this.formattedQuery, this.parameterNamespace);\n  }\n\n  /**\n   * Makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n   */\n  test(): void {\n    // Set up request and listen for event\n    this.xhr = new XMLHttpRequest();\n\n    var testHandler = () => {\n      this.tested = true;\n      var status = this.status;\n      if (status === ResumableChunkStatus.SUCCESS) {\n        this.fire('chunkSuccess', this.message());\n      } else {\n        this.send();\n      }\n    };\n    this.xhr.addEventListener('load', testHandler, false);\n    this.xhr.addEventListener('error', testHandler, false);\n    this.xhr.addEventListener('timeout', testHandler, false);\n\n    // Append the relevant chunk and send it\n    this.xhr.open(this.testMethod, this.getTarget('test'));\n    this.xhr.timeout = this.xhrTimeout;\n    this.xhr.withCredentials = this.withCredentials;\n    // Add data from header options\n    this.setCustomHeaders();\n\n    this.xhr.send(null);\n  }\n\n  /**\n   * Abort and reset a request\n   */\n  abort(): void {\n    if (this.xhr) this.xhr.abort();\n    this.xhr = null;\n  }\n\n  /**\n   *  Uploads the actual data in a POST call\n   */\n  send(): void {\n    if (this.testChunks && !this.tested) {\n      this.test();\n      return;\n    }\n\n    // Set up request and listen for event\n    this.xhr = new XMLHttpRequest();\n\n    // Progress\n    this.xhr.upload.addEventListener('progress', (e: ProgressEvent<XMLHttpRequestEventTarget>) => {\n      if (Date.now() - this.lastProgressCallback.getTime() > this.throttleProgressCallbacks * 1000) {\n        this.fire('chunkProgress', this.message());\n        this.lastProgressCallback = new Date();\n      }\n      this.loaded = e.loaded || 0;\n    }, false);\n    this.loaded = 0;\n    this.pendingRetry = false;\n    this.fire('chunkProgress', this.message());\n\n    /**\n     * Handles the different xhr events based on the status of this chunk\n     */\n    let doneHandler = () => {\n      var status = this.status;\n      switch (status) {\n        case ResumableChunkStatus.SUCCESS:\n          this.fire('chunkSuccess', this.message());\n          break;\n        case ResumableChunkStatus.ERROR:\n          this.fire('chunkError', this.message());\n          break;\n        default:\n          this.fire('chunkRetry', this.message());\n          this.abort();\n          this.retries++;\n          let retryInterval = this.chunkRetryInterval;\n          if (retryInterval !== undefined) {\n            this.pendingRetry = true;\n            setTimeout(this.send, retryInterval);\n          } else {\n            this.send();\n          }\n          break;\n      }\n    };\n    this.xhr.addEventListener('load', doneHandler, false);\n    this.xhr.addEventListener('error', doneHandler, false);\n    this.xhr.addEventListener('timeout', doneHandler, false);\n\n    // Set up the basic query data from Resumable\n    let bytes = this.fileObj.file.slice(this.startByte, this.endByte,\n      this.setChunkTypeFromFile ? this.fileObj.file.type : '');\n    let data = null;\n    let parameterNamespace = this.parameterNamespace;\n    // Add data from the query options\n    if (this.method === 'octet') {\n      data = bytes;\n    } else {\n      data = new FormData();\n      for (const queryKey in this.formattedQuery) {\n        data.append(parameterNamespace + queryKey, this.formattedQuery[queryKey]);\n      }\n      switch (this.chunkFormat) {\n        case 'blob':\n          data.append(parameterNamespace + this.fileParameterName, bytes, this.fileObj.fileName);\n          break;\n        case 'base64':\n          var fr = new FileReader();\n          fr.onload = () => {\n            data.append(parameterNamespace + this.fileParameterName, fr.result);\n            this.xhr.send(data);\n          };\n          fr.readAsDataURL(bytes);\n          break;\n      }\n    }\n\n    let target = this.getTarget('upload');\n\n    this.xhr.open(this.uploadMethod, target);\n    if (this.method === 'octet') {\n      this.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n    }\n    this.xhr.timeout = this.xhrTimeout;\n    this.xhr.withCredentials = this.withCredentials;\n    // Add data from header options\n    this.setCustomHeaders();\n\n    if (this.chunkFormat === 'blob') {\n      this.xhr.send(data);\n    }\n  }\n\n  /**\n   * Return the response text of the underlying XMLHttpRequest if it exists\n   */\n  message(): string {\n    return this.xhr ? this.xhr.responseText : '';\n  };\n\n  /**\n   * Return the progress for the current chunk as a number between 0 and 1\n   * @param relative Whether or not the progress should be calculated based on the size of the entire file\n   */\n  progress(relative: boolean = false): number {\n    var factor = relative ? (this.endByte - this.startByte) / this.fileObjSize : 1;\n    if (this.pendingRetry) return 0;\n    if ((!this.xhr || !this.xhr.status) && !this.isMarkedComplete) factor *= .95;\n    switch (this.status) {\n      case ResumableChunkStatus.SUCCESS:\n      case ResumableChunkStatus.ERROR:\n        return factor;\n      case ResumableChunkStatus.PENDING:\n        return 0;\n      default:\n        return this.loaded / (this.endByte - this.startByte) * factor;\n    }\n  }\n\n  /**\n   * Mark this chunk as completed because it was already uploaded to the server.\n   */\n  markComplete(): void {\n    this.isMarkedComplete = true;\n  }\n}\n","/*\n* MIT Licensed\n*\n* For all code added/modified until Sep 24, 2020\n* (see original repo as original code was split up into multiple files)\n* https://www.twentythree.com\n* https://github.com/23/resumable.js\n* Steffen Fagerström Christensen, steffen@twentythree.com\n*\n* For all code added/modified since Sep 24, 2020\n* https://www.pointcloudtechnology.com/en/\n* https://github.com/pointcloudtechnology/resumable.js\n* For contact (not the sole author): Marcel Wendler, https://github.com/UniquePanda, marcel.wendler@pointcloudtechnology.com\n*/\n\n/**\n * The underlying base class for ResumableJS. This class is responsible for registering and executing\n * events and listeners.\n */\nexport default class ResumableEventHandler {\n  private registeredEventHandlers: { [event: string]: Function[]};\n\n  /**\n   * Construct a new event handler instance.\n   */\n  constructor() {\n    this.registeredEventHandlers = {};\n  }\n\n  /**\n   * Register a new callback for the given event.\n   */\n  on(event: string, callback: Function): void {\n    event = event.toLowerCase();\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) {\n      this.registeredEventHandlers[event] = [];\n    }\n    this.registeredEventHandlers[event].push(callback);\n  }\n\n  /**\n   * Fire the event listeners for the given event with the given arguments as well as the wildcard event '*'\n   */\n  fire(event: string, ...args): void {\n    event = event.toLowerCase();\n\n    this.executeEventCallback(event, ...args);\n    this.executeEventCallback('*', event, ...args);\n  }\n\n  /**\n   * Execute all callbacks for the given event with the provided arguments. This function is only used internally\n   * to call all callbacks registered to a given event individually.\n   */\n  private executeEventCallback(event: string, ...args): void {\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) return;\n    this.registeredEventHandlers[event].forEach((callback) => callback(...args));\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(0);\n",""],"names":[],"sourceRoot":""}