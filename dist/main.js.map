{"version":3,"file":"main.js","mappings":"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","sources":["webpack://resumablejs/webpack/universalModuleDefinition","webpack://resumablejs/webpack/bootstrap","webpack://resumablejs/webpack/runtime/define property getters","webpack://resumablejs/webpack/runtime/hasOwnProperty shorthand","webpack://resumablejs/webpack/runtime/make namespace object","webpack://resumablejs/./src/resumableHelpers.ts","webpack://resumablejs/./src/resumableEventHandler.ts","webpack://resumablejs/./src/resumableChunk.ts","webpack://resumablejs/./src/resumableFile.ts","webpack://resumablejs/./src/resumable.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"resumablejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"resumablejs\"] = factory();\n\telse\n\t\troot[\"resumablejs\"] = factory();\n})(this, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\r\nexport default class ResumableHelpers {\r\n  /**\r\n   * Stop the propagation and default behavior of the given event `e`.\r\n   */\r\n  static stopEvent(e: Event): void {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param file The file whose filename should be retrieved\r\n   */\r\n  static getFileNameFromFile(file: File): string {\r\n    return /*file.fileName ||*/ file.name;\r\n  }\r\n\r\n  /**\r\n   * Generate a unique identifier for the given file based on its size, filename and relative path.\r\n   * @param {File} file The file for which the identifier should be generated\r\n   * @returns {string} The unique identifier for the given file object\r\n   */\r\n  static generateUniqueIdentifier(file: File): string {\r\n    var relativePath = file.webkitRelativePath || /*file.relativePath ||*/ this.getFileNameFromFile(file);\r\n    var size = file.size;\r\n    return (size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\r\n  }\r\n\r\n  /**\r\n   * Flatten the given array and all contained subarrays.\r\n   * Credit: {@link https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep}\r\n   */\r\n  static flattenDeep(array: any[]): any[] {\r\n    return Array.isArray(array)\r\n      ? array.reduce((a, b) => a.concat(this.flattenDeep(b)), [])\r\n      : [array];\r\n  }\r\n\r\n  /**\r\n   * Filter the given array based on the predicate inside `callback`\r\n   * and executes `errorCallback` for duplicate elements.\r\n   */\r\n  static uniqBy(array: any[], callback: Function, errorCallback: Function): any[] {\r\n    let seen = new Set();\r\n    return array.filter((item) => {\r\n      let k = callback(item);\r\n      if (seen.has(k)) {\r\n        errorCallback(item);\r\n        return false;\r\n      } else {\r\n        seen.add(k);\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format the size given in Bytes in a human readable format.\r\n   */\r\n  static formatSize(size: number): string {\r\n    if (size < 1024) {\r\n      return size + ' bytes';\r\n    }\r\n    if (size < 1024 * 1024) {\r\n      return (size / 1024.0).toFixed(0) + ' KB';\r\n    }\r\n    if (size < 1024 * 1024 * 1024) {\r\n      return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\r\n    }\r\n    return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\r\n  }\r\n\r\n  /**\r\n   * Get the target url for the specified request type and params\r\n   */\r\n  static getTarget(\r\n    requestType: string,\r\n    sendTarget: string,\r\n    testTarget: string,\r\n    params: object,\r\n    parameterNamespace: string = ''\r\n  ) {\r\n    let target = sendTarget;\r\n\r\n    if (requestType === 'test' && testTarget) {\r\n      target = testTarget === '/' ? sendTarget : testTarget;\r\n    }\r\n\r\n    let separator = target.indexOf('?') < 0 ? '?' : '&';\r\n    let joinedParams = Object.entries(params).map(([key, value]) => [\r\n      encodeURIComponent(parameterNamespace + key),\r\n      encodeURIComponent(value),\r\n    ].join('=')).join('&');\r\n\r\n    if (joinedParams) target = target + separator + joinedParams;\r\n\r\n    return target;\r\n  }\r\n}\r\n","/**\r\n * The underlying base class for ResumableJS. This class is responsible for registering and executing\r\n * events and listeners.\r\n */\r\nexport default class ResumableEventHandler {\r\n  private registeredEventHandlers: { [event: string]: Function[]};\r\n\r\n  /**\r\n   * Construct a new event handler instance.\r\n   */\r\n  constructor() {\r\n    this.registeredEventHandlers = {};\r\n  }\r\n\r\n  /**\r\n   * Register a new callback for the given event.\r\n   */\r\n  on(event: string, callback: Function): void {\r\n    event = event.toLowerCase();\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) {\r\n      this.registeredEventHandlers[event] = [];\r\n    }\r\n    this.registeredEventHandlers[event].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Fire the event listeners for the given event with the given arguments as well as the wildcard event '*'\r\n   */\r\n  fire(event: string, ...args): void {\r\n    event = event.toLowerCase();\r\n\r\n    this.executeEventCallback(event, ...args);\r\n    this.executeEventCallback('*', event, ...args);\r\n  }\r\n\r\n  /**\r\n   * Execute all callbacks for the given event with the provided arguments. This function is only used internally\r\n   * to call all callbacks registered to a given event individually.\r\n   */\r\n  private executeEventCallback(event: string, ...args): void {\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) return;\r\n    this.registeredEventHandlers[event].forEach((callback) => callback(...args));\r\n  }\r\n}\r\n","import Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport ResumableFile from './resumableFile';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A file chunk that contains all the data that for a single upload request\r\n */\r\nexport default class ResumableChunk extends ResumableEventHandler {\r\n  private fileObj: ResumableFile;\r\n  private fileObjSize: number;\r\n  private fileObjType: string;\r\n  private offset: number;\r\n  private lastProgressCallback: Date = new Date;\r\n  private tested: boolean = false;\r\n  private retries: number = 0;\r\n  private pendingRetry: boolean = false;\r\n  private isMarkedComplete: boolean = false;\r\n  private loaded: number = 0;\r\n  private startByte: number;\r\n  private endByte: number;\r\n  private xhr: XMLHttpRequest = null;\r\n\r\n  // Option properties\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n  private forceChunkSize: boolean = false;\r\n  private fileParameterName: string = 'file';\r\n  chunkNumberParameterName: string = 'resumableChunkNumber';\r\n  chunkSizeParameterName: string = 'resumableChunkSize';\r\n  currentChunkSizeParameterName: string = 'resumableCurrentChunkSize';\r\n  totalSizeParameterName: string = 'resumableTotalSize';\r\n  typeParameterName: string = 'resumableType';\r\n  identifierParameterName: string = 'resumableIdentifier';\r\n  fileNameParameterName: string = 'resumableFilename';\r\n  relativePathParameterName: string = 'resumableRelativePath';\r\n  totalChunksParameterName: string = 'resumableTotalChunks';\r\n  throttleProgressCallbacks: number = 0.5;\r\n  query: object = {};\r\n  headers: object = {};\r\n  method: string = 'multipart';\r\n  uploadMethod: string = 'POST';\r\n  testMethod: string = 'GET';\r\n  parameterNamespace: string = '';\r\n  testChunks: boolean = true;\r\n  maxChunkRetries: number = 100;\r\n  chunkRetryInterval?: number = undefined;\r\n  permanentErrors: number[] = [400, 401, 403, 404, 409, 415, 500, 501];\r\n  withCredentials: boolean = false;\r\n  xhrTimeout: number = 0;\r\n  chunkFormat: string = 'blob';\r\n  setChunkTypeFromFile: boolean = false;\r\n  target: string = '/';\r\n  testTarget: string = '';\r\n\r\n\r\n  constructor(fileObj: ResumableFile, offset: number, options: ResumableConfiguration) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.fileObj = fileObj;\r\n    this.fileObjSize = fileObj.size;\r\n    this.fileObjType = fileObj.file.type;\r\n    this.offset = offset;\r\n\r\n    // Computed properties\r\n    this.startByte = this.offset * this.chunkSize;\r\n    this.endByte = Math.min(this.fileObjSize, (this.offset + 1) * this.chunkSize);\r\n    if (this.fileObjSize - this.endByte < this.chunkSize && !this.forceChunkSize) {\r\n      // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\r\n      this.endByte = this.fileObjSize;\r\n    }\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration): void {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Set the header values for the current XMLHttpRequest\r\n   */\r\n  setCustomHeaders(): void {\r\n    if (!this.xhr) {\r\n      return;\r\n    }\r\n    let customHeaders = this.headers;\r\n    if (customHeaders instanceof Function) {\r\n      customHeaders = customHeaders(this.fileObj, this);\r\n    }\r\n    for (const header in customHeaders) {\r\n      if (!customHeaders.hasOwnProperty(header)) continue;\r\n      this.xhr.setRequestHeader(header, customHeaders[header]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get query parameters for this chunk as an object, combined with custom parameters if provided\r\n   */\r\n  get formattedQuery(): object {\r\n    var customQuery = this.query;\r\n    if (typeof customQuery == 'function') customQuery = customQuery(this.fileObj, this);\r\n\r\n    // Add extra data to identify chunk\r\n    const extraData = {\r\n      // define key/value pairs for additional parameters\r\n      [this.chunkNumberParameterName]: this.offset + 1,\r\n      [this.chunkSizeParameterName]: this.chunkSize,\r\n      [this.currentChunkSizeParameterName]: this.endByte - this.startByte,\r\n      [this.totalSizeParameterName]: this.fileObjSize,\r\n      [this.typeParameterName]: this.fileObjType,\r\n      [this.identifierParameterName]: this.fileObj.uniqueIdentifier,\r\n      [this.fileNameParameterName]: this.fileObj.fileName,\r\n      [this.relativePathParameterName]: this.fileObj.relativePath,\r\n      [this.totalChunksParameterName]: this.fileObj.chunks.length,\r\n    };\r\n    return {...extraData, ...customQuery};\r\n  }\r\n\r\n  /**\r\n   * Determine the status for this Chunk based on different parameters of the underlying XMLHttpRequest\r\n   */\r\n  get status(): ResumableChunkStatus {\r\n    if (this.pendingRetry) {\r\n      // if pending retry then that's effectively the same as actively uploading,\r\n      // there might just be a slight delay before the retry starts\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.isMarkedComplete) {\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (!this.xhr) {\r\n      return ResumableChunkStatus.PENDING;\r\n    } else if (this.xhr.readyState < 4) {\r\n      // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.xhr.status === 200 || this.xhr.status === 201) {\r\n      // HTTP 200, 201 (created)\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (this.permanentErrors.includes(this.xhr.status) || this.retries >= this.maxChunkRetries) {\r\n      // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\r\n      return ResumableChunkStatus.ERROR;\r\n    } else {\r\n      // this should never happen, but we'll reset and queue a retry\r\n      // a likely case for this would be 503 service unavailable\r\n      this.abort();\r\n      return ResumableChunkStatus.PENDING;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the target url for the specified request type and the configured parameters of this chunk\r\n   * @param requestType The type of the request, either 'test' or 'upload'\r\n   */\r\n  getTarget(requestType: string): string {\r\n    return Helpers.getTarget(requestType, this.target, this.testTarget, this.formattedQuery, this.parameterNamespace);\r\n  }\r\n\r\n  /**\r\n   * Makes a GET request without any data to see if the chunk has already been uploaded in a previous session\r\n   */\r\n  test(): void {\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    var testHandler = () => {\r\n      this.tested = true;\r\n      var status = this.status;\r\n      if (status === ResumableChunkStatus.SUCCESS) {\r\n        this.fire('chunkSuccess', this.message());\r\n      } else {\r\n        this.send();\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', testHandler, false);\r\n    this.xhr.addEventListener('error', testHandler, false);\r\n    this.xhr.addEventListener('timeout', testHandler, false);\r\n\r\n    // Append the relevant chunk and send it\r\n    this.xhr.open(this.testMethod, this.getTarget('test'));\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    this.xhr.send(null);\r\n  }\r\n\r\n  /**\r\n   * Abort and reset a request\r\n   */\r\n  abort(): void {\r\n    if (this.xhr) this.xhr.abort();\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   *  Uploads the actual data in a POST call\r\n   */\r\n  send(): void {\r\n    if (this.testChunks && !this.tested) {\r\n      this.test();\r\n      return;\r\n    }\r\n\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    // Progress\r\n    this.xhr.upload.addEventListener('progress', (e: ProgressEvent<XMLHttpRequestEventTarget>) => {\r\n      if (Date.now() - this.lastProgressCallback.getTime() > this.throttleProgressCallbacks * 1000) {\r\n        this.fire('chunkProgress');\r\n        this.lastProgressCallback = new Date();\r\n      }\r\n      this.loaded = e.loaded || 0;\r\n    }, false);\r\n    this.loaded = 0;\r\n    this.pendingRetry = false;\r\n    this.fire('chunkProgress');\r\n\r\n    /**\r\n     * Handles the different xhr registeredEventHandlers based on the status of this chunk\r\n     */\r\n    let doneHandler = () => {\r\n      var status = this.status;\r\n      switch (status) {\r\n        case ResumableChunkStatus.SUCCESS:\r\n        case ResumableChunkStatus.ERROR:\r\n          this.fire(status, this.message());\r\n          break;\r\n        default:\r\n          this.fire('chunkRetry', this.message());\r\n          this.abort();\r\n          this.retries++;\r\n          let retryInterval = this.chunkRetryInterval;\r\n          if (retryInterval !== undefined) {\r\n            this.pendingRetry = true;\r\n            setTimeout(this.send, retryInterval);\r\n          } else {\r\n            this.send();\r\n          }\r\n          break;\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', doneHandler, false);\r\n    this.xhr.addEventListener('error', doneHandler, false);\r\n    this.xhr.addEventListener('timeout', doneHandler, false);\r\n\r\n    // Set up the basic query data from Resumable\r\n    let bytes = this.fileObj.file.slice(this.startByte, this.endByte,\r\n      this.setChunkTypeFromFile ? this.fileObj.file.type : '');\r\n    let data = null;\r\n    let parameterNamespace = this.parameterNamespace;\r\n    // Add data from the query options\r\n    if (this.method === 'octet') {\r\n      data = bytes;\r\n    } else {\r\n      data = new FormData();\r\n      for (const queryKey in this.formattedQuery) {\r\n        data.append(parameterNamespace + queryKey, this.formattedQuery[queryKey]);\r\n      }\r\n      switch (this.chunkFormat) {\r\n        case 'blob':\r\n          data.append(parameterNamespace + this.fileParameterName, bytes, this.fileObj.fileName);\r\n          break;\r\n        case 'base64':\r\n          var fr = new FileReader();\r\n          fr.onload = () => {\r\n            data.append(parameterNamespace + this.fileParameterName, fr.result);\r\n            this.xhr.send(data);\r\n          };\r\n          fr.readAsDataURL(bytes);\r\n          break;\r\n      }\r\n    }\r\n\r\n    let target = this.getTarget('upload');\r\n\r\n    this.xhr.open(this.uploadMethod, target);\r\n    if (this.method === 'octet') {\r\n      this.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\r\n    }\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    if (this.chunkFormat === 'blob') {\r\n      this.xhr.send(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the response text of the underlying XMLHttpRequest if it exists\r\n   */\r\n  message(): string {\r\n    return this.xhr ? this.xhr.responseText : '';\r\n  };\r\n\r\n  /**\r\n   * Return the progress for the current chunk as a number between 0 and 1\r\n   * @param relative Whether or not the progress should be calculated based on the size of the entire file\r\n   */\r\n  progress(relative: boolean = false): number {\r\n    var factor = relative ? (this.endByte - this.startByte) / this.fileObjSize : 1;\r\n    if (this.pendingRetry) return 0;\r\n    if ((!this.xhr || !this.xhr.status) && !this.isMarkedComplete) factor *= .95;\r\n    switch (this.status) {\r\n      case ResumableChunkStatus.SUCCESS:\r\n      case ResumableChunkStatus.ERROR:\r\n        return factor;\r\n      case ResumableChunkStatus.PENDING:\r\n        return 0;\r\n      default:\r\n        return this.loaded / (this.endByte - this.startByte) * factor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark this chunk as completed because it was already uploaded to the server.\r\n   */\r\n  markComplete(): void {\r\n    this.isMarkedComplete = true;\r\n  }\r\n}\r\n","import ResumableChunk from './resumableChunk';\r\nimport Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A single file object that should be uploaded in multiple chunks\r\n */\r\nexport default class ResumableFile extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private _prevProgress: number = 0;\r\n  private isPaused: boolean = false;\r\n\r\n  file: File;\r\n  fileName: string;\r\n  size: number;\r\n  relativePath: string;\r\n  uniqueIdentifier: string;\r\n  private _error: boolean;\r\n  chunks: ResumableChunk[] = [];\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n  private forceChunkSize: boolean = false;\r\n\r\n  constructor(file: File, uniqueIdentifier: string, options: object) {\r\n    super();\r\n    this.opts = options;\r\n    this.setInstanceProperties(options);\r\n    this.file = file;\r\n    this.fileName = Helpers.getFileNameFromFile(file);\r\n    this.size = file.size;\r\n    this.relativePath = /*file.relativePath ||*/ file.webkitRelativePath || this.fileName;\r\n    this.uniqueIdentifier = uniqueIdentifier;\r\n    this._error = uniqueIdentifier !== undefined;\r\n\r\n    // Bootstrap file\r\n    this.fire('chunkingStart', this);\r\n    this.bootstrap();\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Stop current uploads for this file\r\n   */\r\n  abort(): void {\r\n    let abortCount = 0;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        abortCount++;\r\n      }\r\n    }\r\n    if (abortCount > 0) this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Cancel uploading this file and remove it from the file list\r\n   */\r\n  cancel(): void {\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        this.fire('chunkCancel', chunk);\r\n      }\r\n    }\r\n    // Reset this file to be void\r\n    this.chunks = [];\r\n    this.fire('fileCancel', this);\r\n    this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Retry uploading this file\r\n   */\r\n  retry(): void {\r\n    this.bootstrap();\r\n    let firedRetry = false;\r\n    this.on('chunkingComplete', () => {\r\n      if (!firedRetry) this.fire('fileRetry');\r\n      firedRetry = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Prepare this file for a new upload, by dividing it into multiple chunks\r\n   */\r\n  bootstrap(): void {\r\n    const progressHandler = (message) => this.fire('fileProgress', this, message);\r\n    const retryHandler = () =>  this.fire('fileRetry', this);\r\n    const successHandler = (message) => {\r\n      if (this._error) return;\r\n      this.fire('chunkSuccess');\r\n      this.fire('fileProgress', this, message); // it's at least progress\r\n      if (this.isComplete) {\r\n        this.fire('fileSuccess', this, message);\r\n      }\r\n    };\r\n    const errorHandler = (message) => {\r\n      this.fire('chunkError', message);\r\n      this.abort();\r\n      this._error = true;\r\n      this.chunks = [];\r\n      this.fire('fileError', this, message);\r\n    }\r\n\r\n    this.abort();\r\n    this._error = false;\r\n    // Rebuild stack of chunks from file\r\n    this.chunks = [];\r\n    this._prevProgress = 0;\r\n    const round = this.forceChunkSize ? Math.ceil : Math.floor;\r\n    const maxOffset = Math.max(round(this.file.size / this.chunkSize), 1);\r\n    for (var offset = 0; offset < maxOffset; offset++) {\r\n      const chunk = new ResumableChunk(this, offset, this.opts);\r\n      chunk.on('chunkProgress', progressHandler);\r\n      chunk.on('chunkError', errorHandler);\r\n      chunk.on('chunkSuccess', successHandler);\r\n      chunk.on('chunkRetry', retryHandler);\r\n      this.chunks.push(chunk);\r\n      this.fire('chunkingProgress', this, offset / maxOffset);\r\n    }\r\n    this.fire('chunkingComplete', this);\r\n  }\r\n\r\n  /**\r\n   * Get the progress for uploading this file based on the progress of the individual file chunks\r\n   */\r\n  progress(): number {\r\n    if (this._error) return 1;\r\n    // Sum up progress across everything\r\n    var ret = 0;\r\n    var error = false;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.ERROR) error = true;\r\n      ret += chunk.progress(true); // get chunk progress relative to entire file\r\n    }\r\n    ret = error ? 1 : (ret > 0.99999 ? 1 : ret);\r\n    ret = Math.max(this._prevProgress, ret); // We don't want to lose percentages when an upload is paused\r\n    this._prevProgress = ret;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Check whether at least one of this file's chunks is currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.chunks.some((chunk) => chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Check whether all of this file's chunks completed their upload requests and whether it should be\r\n   * treated as completed.\r\n   */\r\n  get isComplete(): boolean {\r\n    return !this.chunks.some((chunk) =>\r\n      chunk.status === ResumableChunkStatus.PENDING || chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Initiate the upload of a new chunk for this file. This function returns whether a new upload was started or not.\r\n   */\r\n  upload(): boolean {\r\n    if (this.isPaused) {\r\n      return false;\r\n    }\r\n\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.PENDING) {\r\n        chunk.send();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Mark a given number of chunks as already uploaded to the server.\r\n   * @param chunkNumber The index until which all chunks should be marked as completed\r\n   */\r\n  markChunksCompleted(chunkNumber: number): void {\r\n    if (!this.chunks || this.chunks.length <= chunkNumber) {\r\n      return;\r\n    }\r\n    for (let num = 0; num < chunkNumber; num++) {\r\n      this.chunks[num].markComplete();\r\n    }\r\n  }\r\n}\r\n","import Helpers from './resumableHelpers';\r\nimport ResumableFile from './resumableFile';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ExtendedFile, ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/*\r\n* MIT Licensed\r\n* http://www.twentythree.com/\r\n* http://github.com/23/resumable.js\r\n* Steffen Tiedemann Christensen, steffen@twentythree.com\r\n*/\r\n\r\n/**\r\n * An instance of a resumable upload handler that contains one or multiple files which should be uploaded in chunks.\r\n */\r\nexport class Resumable extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private files: ResumableFile[] = [];\r\n  private validators: {[fileType: string]: Function} = {};\r\n  private support: boolean;\r\n\r\n  // Configuration Options\r\n  clearInput: boolean = true;\r\n  dragOverClass: string = 'dragover';\r\n  fileTypes: string[] = [];\r\n  fileTypeErrorCallback: Function = (file) => {\r\n    alert(`${file.fileName || file.name} has an unsupported file type, please upload files of type ${this.fileTypes}.`);\r\n  };\r\n  _generateUniqueIdentifier: Function = null;\r\n  maxFileSize?: number;\r\n  maxFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too large, please upload files less than ' +\r\n      Helpers.formatSize(this.maxFileSize) + '.');\r\n  };\r\n  maxFiles?: number;\r\n  maxFilesErrorCallback: Function = (files) => {\r\n    var maxFiles = this.maxFiles;\r\n    alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\r\n  };\r\n  minFileSize: number = 1;\r\n  minFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too small, please upload files larger than ' +\r\n      Helpers.formatSize(this.minFileSize) + '.');\r\n  };\r\n  prioritizeFirstAndLastChunk: boolean = false;\r\n  fileValidationErrorCallback: Function = (file) => {};\r\n  simultaneousUploads: number = 3;\r\n\r\n  constructor(options: ResumableConfiguration = {}) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.opts = options;\r\n    this.checkSupport();\r\n  }\r\n\r\n  /**\r\n   * Check whether the current browser supports the essential functions for the package to work.\r\n   * The method checks if these features are supported:\r\n   * - File object type\r\n   * - Blob object type\r\n   * - FileList object type\r\n   * - slicing files\r\n   */\r\n  private checkSupport(): void {\r\n    this.support =\r\n      File !== undefined &&\r\n      Blob !== undefined &&\r\n      FileList !== undefined &&\r\n      !!Blob.prototype.slice;\r\n    if (!this.support) {\r\n      throw new Error('Not supported by Browser');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign the attributes of this instance via destructuring of the options object.\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n\r\n    // For good behaviour we do some initial sanitizing. Remove spaces and dots and lowercase all\r\n    this.fileTypes = this.fileTypes.map((type) => type.replace(/[\\s.]/g, '').toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * Transforms a single fileEntry or DirectoryEntry item into a list of File objects\r\n   * @param {Object} item item to upload, may be file or directory entry\r\n   * @param {string} path current file path\r\n   */\r\n  private async mapItemToFile(item: FileSystemEntry, path: string): Promise<File[]> {\r\n    if (item instanceof FileSystemFileEntry) {\r\n      // file entry provided\r\n      const file = await new Promise((resolve, reject) => item.file(resolve, reject)) as ExtendedFile;\r\n      file.relativePath = path + file.name;\r\n      return [file];\r\n    } else if (item instanceof FileSystemDirectoryEntry) {\r\n      return await this.processDirectory(item, path + item.name + '/');\r\n    } else if (item instanceof File) {\r\n      return [item];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Transforms a single DataTransfer item into a File object. This may include either extracting the given file or\r\n   * all files inside the provided directory.\r\n   * @param item item to upload, may be file or directory entry\r\n   * @param path current file path\r\n   */\r\n  private async mapDragItemToFile(item: DataTransferItem, path: string): Promise<File[]> {\r\n    let entry = item.webkitGetAsEntry();\r\n    if (entry instanceof FileSystemDirectoryEntry) {\r\n      return await this.processDirectory(entry, path + entry.name + '/');\r\n    }\r\n\r\n    let file = item.getAsFile();\r\n    if (file instanceof File) {\r\n      (file as ExtendedFile).relativePath = path + file.name;\r\n      return [file];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Recursively traverse a directory and collect files to upload\r\n   */\r\n  private processDirectory(directory: FileSystemDirectoryEntry, path: string): Promise<File[]> {\r\n    return new Promise((resolve, reject) => {\r\n      const dirReader = directory.createReader();\r\n      let allEntries = [];\r\n\r\n      const readEntries = (): void => {\r\n        dirReader.readEntries(async (entries: FileSystemEntry[]): Promise<void> => {\r\n          // Read the files batch-wise (in chrome e.g. 100 at a time)\r\n          if (entries.length) {\r\n            allEntries = allEntries.concat(entries);\r\n            return readEntries();\r\n          }\r\n\r\n          // After collecting all files, map all fileEntries to File objects\r\n          allEntries = allEntries.map((entry) => {\r\n            return this.mapItemToFile(entry, path);\r\n          });\r\n          // Wait until all files are collected.\r\n          resolve(await Promise.all(allEntries));\r\n        }, reject);\r\n      };\r\n\r\n      readEntries();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a new file was provided via drag-and-drop\r\n   */\r\n  private async onDrop(e: DragEvent): Promise<void> {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n    Helpers.stopEvent(e);\r\n\r\n    let items = [];\r\n\r\n    //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\r\n    if (e.dataTransfer && e.dataTransfer.items) {\r\n      items = Array.from(e.dataTransfer.items);\r\n    }\r\n    //else handle them as files\r\n    else if (e.dataTransfer && e.dataTransfer.files) {\r\n      items = Array.from(e.dataTransfer.files);\r\n    }\r\n\r\n    if (!items.length) {\r\n      return; // nothing to do\r\n    }\r\n    this.fire('fileProcessingBegin', items);\r\n    let promises = items.map((item) => this.mapDragItemToFile(item, ''));\r\n    let files = Helpers.flattenDeep(await Promise.all(promises));\r\n    if (files.length) {\r\n      // at least one file found\r\n      this.appendFilesFromFileList(files, e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item leaves the area of assigned drag-and-drop area\r\n   */\r\n  private onDragLeave(e: DragEvent): void {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item enters the area of assigned drag-and-drop area\r\n   */\r\n  private onDragOverEnter(e: DragEvent): void {\r\n    e.preventDefault();\r\n    let dt = e.dataTransfer;\r\n    if (dt.types.includes('Files')) { // only for file drop\r\n      e.stopPropagation();\r\n      dt.dropEffect = 'copy';\r\n      dt.effectAllowed = 'copy';\r\n      (e.currentTarget as HTMLElement).classList.add(this.dragOverClass);\r\n    } else { // not work on IE/Edge....\r\n      dt.dropEffect = 'none';\r\n      dt.effectAllowed = 'none';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate and clean a list of files. This includes the removal of duplicates, a check whether the file type is\r\n   * allowed and custom validation functions defined per file type.\r\n   * @param {ExtendedFile[]} files A list of File instances that were previously extended with a uniqueIdentifier\r\n   */\r\n  private async validateFiles(files: ExtendedFile[]): Promise<ExtendedFile[]> {\r\n    // Remove files that are duplicated in the original array, based on their unique identifiers\r\n    let uniqueFiles = Helpers.uniqBy(files,\r\n      (file) => file.uniqueIdentifier,\r\n      (file) => this.fire('fileProcessingFailed', file, 'duplicate'),\r\n    );\r\n\r\n    let validationPromises = uniqueFiles.map(async (file) => {\r\n      // Remove files that were already added based on their unique identifiers\r\n      if (this.files.some((addedFile) => addedFile.uniqueIdentifier === file.uniqueIdentifier)) {\r\n        this.fire('fileProcessingFailed', file, 'duplicate');\r\n        return false;\r\n      }\r\n\r\n      let fileType: string = file.type.toLowerCase();\r\n      let fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (this.fileTypes.length > 0) {\r\n        const fileTypeFound = this.fileTypes.some((type) => {\r\n          // Check whether the extension inside the filename is an allowed file type\r\n          return fileExtension === type ||\r\n            // If MIME type, check for wildcard or if extension matches the file's tile type\r\n            type.includes('/') && (\r\n              type.includes('*') &&\r\n              fileType.substring(0, type.indexOf('*')) === type.substring(0, type.indexOf('*')) ||\r\n              fileType === type\r\n            );\r\n        });\r\n        if (!fileTypeFound) {\r\n          this.fire('fileProcessingFailed', file, 'fileType');\r\n          this.fileTypeErrorCallback(file);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Validate the file size against minimum and maximum allowed sizes\r\n      if (this.minFileSize !== undefined && file.size < this.minFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'minFileSize');\r\n        this.minFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n      if (this.maxFileSize !== undefined && file.size > this.maxFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'maxFileSize');\r\n        this.maxFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      // Apply a custom validator based on the file extension\r\n      if (fileExtension in this.validators && !await this.validators[fileExtension](file)) {\r\n        this.fire('fileProcessingFailed', file, 'validation');\r\n        this.fileValidationErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    const results = await Promise.all(validationPromises);\r\n\r\n    // Only include files that passed their validation tests\r\n    return files.filter((_v, index) => results[index]);\r\n  }\r\n\r\n  /**\r\n   * Add an array of files to this instance's file list by creating new ResumableFiles. This includes a validation and\r\n   * deduplication of the provided array.\r\n   * @param fileList An array containing File objects\r\n   * @param event The event with which the fileList was provided\r\n   */\r\n  private async appendFilesFromFileList(fileList: File[], event: Event): Promise<boolean> {\r\n    // check for uploading too many files\r\n    if (this.maxFiles !== undefined && this.maxFiles < fileList.length + this.files.length) {\r\n      // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\r\n      if (this.maxFiles === 1 && this.files.length === 1 && fileList.length === 1) {\r\n        this.removeFile(this.files[0]);\r\n      } else {\r\n        this.fire('fileProcessingFailed', undefined, 'maxFiles');\r\n        this.maxFilesErrorCallback(fileList);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Add the unique identifier for every new file.\r\n    // Since this might return a promise, we have to wait until it completed.\r\n    const filesWithUniqueIdentifiers = await Promise.all(fileList.map(async (file: ExtendedFile): Promise<ExtendedFile> => {\r\n      file.uniqueIdentifier = await this.generateUniqueIdentifier(file, event);\r\n      return file;\r\n    }));\r\n\r\n    // Validate the files and remove duplicates\r\n    const validatedFiles = await this.validateFiles(filesWithUniqueIdentifiers);\r\n\r\n    let skippedFiles = filesWithUniqueIdentifiers.filter((file) => !validatedFiles.includes(file));\r\n\r\n    for (const file of validatedFiles) {\r\n      let f = new ResumableFile(file, file.uniqueIdentifier, this.opts);\r\n      f.on('chunkSuccess', () => this.handleChunkSuccess());\r\n      f.on('chunkError', () => this.handleChunkError());\r\n      f.on('chunkCancel', () => this.handleChunkCancel());\r\n      f.on('fileProgress', () => this.handleFileProgress());\r\n      f.on('fileError', (...args) => this.handleFileError(args));\r\n      f.on('fileSuccess', (...args) => this.handleFileSuccess(args));\r\n      f.on('fileCancel', (...args) => this.handleFileCancel(args));\r\n      f.on('fileRetry', () => this.handleFileRetry());\r\n      this.files.push(f);\r\n      this.fire('fileAdded', f, event);\r\n    }\r\n\r\n    // all files processed, trigger event\r\n    if (!validatedFiles.length && !skippedFiles.length) {\r\n      // no succeeded files, just skip\r\n      return;\r\n    }\r\n    this.fire('filesAdded', validatedFiles, skippedFiles);\r\n  }\r\n\r\n  /**\r\n   * Generate a new unique identifier for a given file either with a default helper function or with a custom\r\n   * generator function.\r\n   * @param file The file as an HTML 5 File object\r\n   * @param event The event with which the file was provided originally\r\n   */\r\n  private generateUniqueIdentifier(file: File, event: Event): string {\r\n    return typeof this._generateUniqueIdentifier === 'function' ?\r\n      this._generateUniqueIdentifier(file, event) : Helpers.generateUniqueIdentifier(file);\r\n  }\r\n\r\n  /**\r\n   * Queue a new chunk to be uploaded that is currently awaiting upload.\r\n   */\r\n  private uploadNextChunk(): void {\r\n    // In some cases (such as videos) it's really handy to upload the first\r\n    // and last chunk of a file quickly; this lets the server check the file's\r\n    // metadata and determine if there's even a point in continuing.\r\n    if (this.prioritizeFirstAndLastChunk) {\r\n      for (const file of this.files) {\r\n        if (file.chunks.length && file.chunks[0].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[0].send();\r\n          return;\r\n        }\r\n        if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[file.chunks.length - 1].send();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Now, simply look for the next best thing to upload\r\n    for (const file of this.files) {\r\n      if (file.upload()) return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  PUBLIC METHODS FOR RESUMABLE.JS\r\n   *  This section only includes methods that should be callable from external packages.\r\n   */\r\n\r\n  /**\r\n   * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\r\n   */\r\n  assignBrowse(domNodes: HTMLInputElement | HTMLInputElement[], isDirectory: boolean = false): void {\r\n    if (domNodes instanceof HTMLInputElement) domNodes = [domNodes];\r\n    for (const domNode of domNodes) {\r\n      let input;\r\n      if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\r\n        input = domNode;\r\n      } else {\r\n        input = document.createElement('input');\r\n        input.setAttribute('type', 'file');\r\n        input.style.display = 'none';\r\n        domNode.addEventListener('click', () => {\r\n          input.style.opacity = 0;\r\n          input.style.display = 'block';\r\n          input.focus();\r\n          input.click();\r\n          input.style.display = 'none';\r\n        }, false);\r\n        domNode.appendChild(input);\r\n      }\r\n      if (this.maxFiles !== 1) {\r\n        input.setAttribute('multiple', 'multiple');\r\n      } else {\r\n        input.removeAttribute('multiple');\r\n      }\r\n      if (isDirectory) {\r\n        input.setAttribute('webkitdirectory', 'webkitdirectory');\r\n      } else {\r\n        input.removeAttribute('webkitdirectory');\r\n      }\r\n      if (this.fileTypes.length >= 1) {\r\n        input.setAttribute('accept', this.fileTypes.map((type) => {\r\n          type = type.replace(/\\s/g, '').toLowerCase();\r\n          if (type.match(/^[^.][^/]+$/)) {\r\n            type = '.' + type;\r\n          }\r\n          return type;\r\n        }).join(','));\r\n      } else {\r\n        input.removeAttribute('accept');\r\n      }\r\n      // When new files are added, simply append them to the overall list\r\n      input.addEventListener('change', (e: InputEvent) => {\r\n        const eventTarget = e.target as HTMLInputElement;\r\n        this.fire('fileProcessingBegin', eventTarget.files);\r\n        this.appendFilesFromFileList(Array.from(eventTarget.files), e);\r\n        if (this.clearInput) {\r\n          eventTarget.value = '';\r\n        }\r\n      }, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign one or more DOM nodes as a drop target.\r\n   */\r\n  assignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.addEventListener('dragover', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragenter', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragleave', this.onDragLeave.bind(this), false);\r\n      domNode.addEventListener('drop', this.onDrop.bind(this), false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove one or more DOM nodes as a drop target.\r\n   */\r\n  unAssignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.removeEventListener('dragover', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragenter', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragleave', this.onDragLeave.bind(this));\r\n      domNode.removeEventListener('drop', this.onDrop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether any files are currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.files.some((file) => file.isUploading);\r\n  }\r\n\r\n  /**\r\n   * Start or resume the upload of the provided files by initiating the upload of the first chunk\r\n   */\r\n  upload(): void {\r\n    // Make sure we don't start too many uploads at once\r\n    if (this.isUploading) return;\r\n    // Kick off the queue\r\n    this.fire('uploadStart');\r\n    for (let num = 1; num <= this.simultaneousUploads; num++) {\r\n      this.uploadNextChunk();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pause the upload\r\n   */\r\n  pause(): void {\r\n    // Resume all chunks currently being uploaded\r\n    for (const file of this.files) {\r\n      file.abort();\r\n    }\r\n    this.fire('pause');\r\n  };\r\n\r\n  /**\r\n   * Cancel uploading and reset all files to their initial states\r\n   */\r\n  cancel(): void {\r\n    this.fire('beforeCancel');\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      this.files[i].cancel();\r\n    }\r\n    this.fire('cancel');\r\n  };\r\n\r\n  /**\r\n   * Return the progress of the current upload as a float between 0 and 1\r\n   */\r\n  progress(): number {\r\n    let totalDone = this.files.reduce((accumulator, file) => accumulator + file.size * file.progress(), 0);\r\n    let totalSize = this.getSize();\r\n    return totalSize > 0 ? totalDone / totalSize : 0;\r\n  };\r\n\r\n  /**\r\n   * Add a HTML5 File object to the list of files.\r\n   */\r\n  addFile(file: File, event: Event): void {\r\n    this.appendFilesFromFileList([file], event);\r\n  };\r\n\r\n  /**\r\n   * Add a list of HTML5 File objects to the list of files.\r\n   */\r\n  addFiles(files: File[], event: Event): void {\r\n    this.appendFilesFromFileList(files, event);\r\n  };\r\n\r\n  /**\r\n   * Add a validator function for the given file type. This can e.g. be used to read the file and validate\r\n   * checksums based on certain properties.\r\n   * @param fileType The file extension for the given validator\r\n   * @param validator A callback function that should be called when validating files with the given type\r\n   */\r\n  addFileValidator(fileType: string, validator: Function): void {\r\n    if (fileType in this.validators) {\r\n      console.warn(`Overwriting validator for file type: ${fileType}`);\r\n    }\r\n    this.validators[fileType] = validator;\r\n  }\r\n\r\n  /**\r\n   * Cancel the upload of a specific ResumableFile object and remove it from the file list.\r\n   */\r\n  removeFile(file: ResumableFile): void {\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      if (this.files[i] === file) {\r\n        this.files.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve a ResumableFile object from the file list by its unique identifier.\r\n   */\r\n  getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile {\r\n    return this.files.find((file) => file.uniqueIdentifier === uniqueIdentifier);\r\n  };\r\n\r\n  /**\r\n   * Get the combined size of all files for the upload\r\n   */\r\n  getSize(): number {\r\n    return this.files.reduce((accumulator, file) => accumulator + file.size, 0);\r\n  }\r\n\r\n  /**\r\n   * Call the event handler when a file is dropped on the drag-and-drop area\r\n   */\r\n  handleDropEvent(e: DragEvent): void {\r\n    this.onDrop(e);\r\n  }\r\n  /**\r\n   * Call the event handler when the provided input element changes (i.e. receives one or multiple files.\r\n   */\r\n  handleChangeEvent(e: InputEvent): void {\r\n    this.appendFilesFromFileList(Array.from((e.target as HTMLInputElement).files), e);\r\n    (e.target as HTMLInputElement).value = '';\r\n  }\r\n\r\n  /**\r\n   * Check whether the upload is completed, i.e. if all files were uploaded successfully.\r\n   */\r\n  checkUploadComplete(): void {\r\n    let uploadCompleted = this.files.every((file) => file.isComplete);\r\n    if (uploadCompleted) {\r\n      // All chunks have been uploaded, complete\r\n      this.fire('complete');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handlers: This section should only include methods that are used to\r\n   * handle events coming from the files or chunks.\r\n   */\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkSuccess(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkError(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a chunk\r\n   */\r\n  private handleChunkCancel(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a file\r\n   */\r\n  private handleFileError(args: any[]): void {\r\n    this.fire('error', args[1], args[0]);\r\n  }\r\n\r\n  /**\r\n   * The event handler when all chunks from a file were uploaded successfully\r\n   */\r\n  private handleFileSuccess(args: any[]): void {\r\n    this.fire('fileSuccess', ...args);\r\n    this.checkUploadComplete();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a file progress event was received\r\n   */\r\n  private handleFileProgress(): void {\r\n    this.fire('progress');\r\n  }\r\n\r\n  /**\r\n   * The event handler when the upload of a file was canceled\r\n   */\r\n  private handleFileCancel(args: any[]): void {\r\n    this.removeFile(args[0])\r\n  }\r\n\r\n  /**\r\n   * The event handler, when the retry of a file was initiated\r\n   */\r\n  private handleFileRetry(): void {\r\n    this.upload();\r\n  }\r\n}\r\n"],"names":["root","factory","exports","module","define","amd","this","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","stopEvent","e","stopPropagation","preventDefault","getFileNameFromFile","file","name","generateUniqueIdentifier","relativePath","webkitRelativePath","size","replace","flattenDeep","array","Array","isArray","reduce","a","b","concat","uniqBy","callback","errorCallback","seen","Set","filter","item","k","has","add","formatSize","toFixed","getTarget","requestType","sendTarget","testTarget","params","parameterNamespace","target","separator","indexOf","joinedParams","entries","map","encodeURIComponent","join","registeredEventHandlers","on","event","toLowerCase","push","fire","executeEventCallback","args","forEach","fileObj","offset","options","lastProgressCallback","Date","tested","retries","pendingRetry","isMarkedComplete","loaded","xhr","chunkSize","forceChunkSize","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","method","uploadMethod","testMethod","testChunks","maxChunkRetries","chunkRetryInterval","undefined","permanentErrors","withCredentials","xhrTimeout","chunkFormat","setChunkTypeFromFile","setInstanceProperties","fileObjSize","fileObjType","type","startByte","endByte","Math","min","assign","setCustomHeaders","customHeaders","header","Function","setRequestHeader","customQuery","extraData","uniqueIdentifier","fileName","chunks","length","readyState","status","includes","abort","formattedQuery","test","XMLHttpRequest","testHandler","message","send","addEventListener","open","timeout","upload","now","getTime","doneHandler","retryInterval","setTimeout","bytes","slice","data","queryKey","FormData","append","fr","FileReader","onload","result","readAsDataURL","responseText","progress","relative","factor","markComplete","_prevProgress","isPaused","opts","_error","bootstrap","abortCount","chunk","cancel","retry","firedRetry","progressHandler","retryHandler","successHandler","isComplete","errorHandler","round","ceil","floor","maxOffset","max","ret","error","some","markChunksCompleted","chunkNumber","num","files","validators","clearInput","dragOverClass","fileTypes","fileTypeErrorCallback","alert","_generateUniqueIdentifier","maxFileSizeErrorCallback","maxFileSize","maxFilesErrorCallback","maxFiles","minFileSize","minFileSizeErrorCallback","prioritizeFirstAndLastChunk","fileValidationErrorCallback","simultaneousUploads","checkSupport","Resumable","support","File","Blob","FileList","Error","mapItemToFile","path","FileSystemFileEntry","Promise","resolve","reject","FileSystemDirectoryEntry","processDirectory","console","warn","mapDragItemToFile","entry","webkitGetAsEntry","getAsFile","directory","dirReader","createReader","allEntries","readEntries","all","onDrop","currentTarget","classList","remove","items","dataTransfer","from","promises","appendFilesFromFileList","onDragLeave","onDragOverEnter","dt","types","dropEffect","effectAllowed","validateFiles","uniqueFiles","validationPromises","addedFile","fileType","fileExtension","split","pop","substring","results","_v","index","fileList","removeFile","filesWithUniqueIdentifiers","validatedFiles","skippedFiles","f","handleChunkSuccess","handleChunkError","handleChunkCancel","handleFileProgress","handleFileError","handleFileSuccess","handleFileCancel","handleFileRetry","uploadNextChunk","assignBrowse","domNodes","isDirectory","HTMLInputElement","domNode","input","tagName","document","createElement","setAttribute","style","display","opacity","focus","click","appendChild","removeAttribute","match","eventTarget","assignDrop","HTMLElement","bind","unAssignDrop","removeEventListener","isUploading","pause","i","totalDone","accumulator","totalSize","getSize","addFile","addFiles","addFileValidator","validator","splice","getFromUniqueIdentifier","find","handleDropEvent","handleChangeEvent","checkUploadComplete","every"],"sourceRoot":""}