{"version":3,"file":"main.js","mappings":"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","sources":["webpack://resumablejs/webpack/universalModuleDefinition","webpack://resumablejs/./src/resumable.ts","webpack://resumablejs/./src/resumableChunk.ts","webpack://resumablejs/./src/resumableEventHandler.ts","webpack://resumablejs/./src/resumableFile.ts","webpack://resumablejs/./src/resumableHelpers.ts","webpack://resumablejs/webpack/bootstrap","webpack://resumablejs/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"resumablejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"resumablejs\"] = factory();\n\telse\n\t\troot[\"resumablejs\"] = factory();\n})(this, function() {\nreturn ","import Helpers from './resumableHelpers';\nimport ResumableFile from './resumableFile';\nimport ResumableEventHandler from './resumableEventHandler';\nimport {ExtendedFile, ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/*\n* MIT Licensed\n* http://www.twentythree.com/\n* http://github.com/23/resumable.js\n* Steffen Tiedemann Christensen, steffen@twentythree.com\n*/\n\n/**\n * An instance of a resumable upload handler that contains one or multiple files which should be uploaded in chunks.\n */\nexport class Resumable extends ResumableEventHandler {\n  private opts: ResumableConfiguration;\n  private files: ResumableFile[] = [];\n  private validators: {[fileType: string]: Function} = {};\n  private support: boolean;\n\n  // Configuration Options\n  clearInput: boolean = true;\n  dragOverClass: string = 'dragover';\n  fileTypes: string[] = [];\n  fileTypeErrorCallback: Function = (file) => {\n    alert(`${file.fileName || file.name} has an unsupported file type, please upload files of type ${this.fileTypes}.`);\n  };\n  _generateUniqueIdentifier: Function = null;\n  maxFileSize?: number;\n  maxFileSizeErrorCallback: Function = (file) => {\n    alert(file.fileName || file.name + ' is too large, please upload files less than ' +\n      Helpers.formatSize(this.maxFileSize) + '.');\n  };\n  maxFiles?: number;\n  maxFilesErrorCallback: Function = (files) => {\n    var maxFiles = this.maxFiles;\n    alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\n  };\n  minFileSize: number = 1;\n  minFileSizeErrorCallback: Function = (file) => {\n    alert(file.fileName || file.name + ' is too small, please upload files larger than ' +\n      Helpers.formatSize(this.minFileSize) + '.');\n  };\n  prioritizeFirstAndLastChunk: boolean = false;\n  fileValidationErrorCallback: Function = (file) => {};\n  simultaneousUploads: number = 3;\n\n  constructor(options: ResumableConfiguration = {}) {\n    super();\n    this.setInstanceProperties(options);\n    this.opts = options;\n    this.checkSupport();\n  }\n\n  /**\n   * Check whether the current browser supports the essential functions for the package to work.\n   * The method checks if these features are supported:\n   * - File object type\n   * - Blob object type\n   * - FileList object type\n   * - slicing files\n   */\n  private checkSupport(): void {\n    this.support =\n      File !== undefined &&\n      Blob !== undefined &&\n      FileList !== undefined &&\n      !!Blob.prototype.slice;\n    if (!this.support) {\n      throw new Error('Not supported by Browser');\n    }\n  }\n\n  /**\n   * Assign the attributes of this instance via destructuring of the options object.\n   */\n  protected setInstanceProperties(options: ResumableConfiguration) {\n    Object.assign(this, options);\n    this.sanitizeFileTypes();\n  }\n\n  private sanitizeFileTypes() {\n    // For good behaviour we do some sanitizing. Remove spaces and dots and lowercase all.\n    this.fileTypes = this.fileTypes.map((type) => type.replace(/[\\s.]/g, '').toLowerCase());\n  }\n\n  /**\n   * Transforms a single fileEntry or directoryEntry item into a list of File objects this method is used to convert\n   * entries found inside dragged-and-dropped directories.\n   * @param {Object} item item to upload, may be file or directory entry\n   * @param {string} path current file path\n   */\n  private async mapDirectoryItemToFile(item: FileSystemEntry, path: string): Promise<File[]> {\n    if (item.isFile) {\n      // file entry provided\n      const file = await new Promise(\n        (resolve, reject) => (item as FileSystemFileEntry).file(resolve, reject)\n      ) as ExtendedFile;\n      file.relativePath = path + file.name;\n      return [file];\n    } else if (item.isDirectory) {\n      // directory entry provided\n      return await this.processDirectory(item as FileSystemDirectoryEntry, path + item.name + '/');\n    } else if (item instanceof File) {\n      return [item];\n    }\n\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\n    return [];\n  }\n\n  /**\n   * Transforms a single DataTransfer item into a File object. This may include either extracting the given file or\n   * all files inside the provided directory.\n   * @param item item to upload, may be file or directory entry\n   * @param path current file path\n   */\n  private async mapDragItemToFile(item: DataTransferItem, path: string): Promise<File[]> {\n    let entry = item.webkitGetAsEntry();\n    if (entry.isDirectory) {\n      return await this.processDirectory(entry as FileSystemDirectoryEntry, path + entry.name + '/');\n    }\n\n    let file = item.getAsFile();\n    if (file instanceof File) {\n      (file as ExtendedFile).relativePath = path + file.name;\n      return [file];\n    }\n\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\n    return [];\n  }\n\n  /**\n   * Recursively traverse a directory and collect files to upload\n   */\n  private processDirectory(directory: FileSystemDirectoryEntry, path: string): Promise<File[]> {\n    return new Promise((resolve, reject) => {\n      const dirReader = directory.createReader();\n      let allEntries = [];\n\n      const readEntries = (): void => {\n        dirReader.readEntries(async (entries: FileSystemEntry[]): Promise<void> => {\n          // Read the files batch-wise (in chrome e.g. 100 at a time)\n          if (entries.length) {\n            allEntries = allEntries.concat(entries);\n            return readEntries();\n          }\n\n          // After collecting all files, map all fileEntries to File objects\n          allEntries = allEntries.map((entry) => {\n            return this.mapDirectoryItemToFile(entry, path);\n          });\n          // Wait until all files are collected.\n          resolve(await Promise.all(allEntries));\n        }, reject);\n      };\n\n      readEntries();\n    });\n  }\n\n  /**\n   * Handle the event when a new file was provided via drag-and-drop\n   */\n  private async onDrop(e: DragEvent): Promise<void> {\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\n    Helpers.stopEvent(e);\n\n    let items = [];\n\n    //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\n    if (e.dataTransfer && e.dataTransfer.items) {\n      items = [...e.dataTransfer.items as any];\n    }\n    //else handle them as files\n    else if (e.dataTransfer && e.dataTransfer.files) {\n      items =  [...e.dataTransfer.files as any];\n    }\n\n    if (!items.length) {\n      return; // nothing to do\n    }\n    this.fire('fileProcessingBegin', items);\n    let promises = items.map((item) => this.mapDragItemToFile(item, ''));\n    let files = Helpers.flattenDeep(await Promise.all(promises));\n    if (files.length) {\n      // at least one file found\n      this.appendFilesFromFileList(files, e);\n    }\n  }\n\n  /**\n   * Handle the event when a drag-and-drop item leaves the area of assigned drag-and-drop area\n   */\n  private onDragLeave(e: DragEvent): void {\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\n  }\n\n  /**\n   * Handle the event when a drag-and-drop item enters the area of assigned drag-and-drop area\n   */\n  private onDragOverEnter(e: DragEvent): void {\n    e.preventDefault();\n    let dt = e.dataTransfer;\n    if (dt.types.includes('Files')) { // only for file drop\n      e.stopPropagation();\n      dt.dropEffect = 'copy';\n      dt.effectAllowed = 'copy';\n      (e.currentTarget as HTMLElement).classList.add(this.dragOverClass);\n    } else {\n      dt.dropEffect = 'none';\n      dt.effectAllowed = 'none';\n    }\n  };\n\n  /**\n   * Validate and clean a list of files. This includes the removal of duplicates, a check whether the file type is\n   * allowed and custom validation functions defined per file type.\n   * @param {ExtendedFile[]} files A list of File instances that were previously extended with a uniqueIdentifier\n   */\n  private async validateFiles(files: ExtendedFile[]): Promise<ExtendedFile[]> {\n    // Remove files that are duplicated in the original array, based on their unique identifiers\n    let uniqueFiles = Helpers.uniqBy(files,\n      (file) => file.uniqueIdentifier,\n      (file) => this.fire('fileProcessingFailed', file, 'duplicate'),\n    );\n\n    let validationPromises = uniqueFiles.map(async (file) => {\n      // Remove files that were already added based on their unique identifiers\n      if (this.files.some((addedFile) => addedFile.uniqueIdentifier === file.uniqueIdentifier)) {\n        this.fire('fileProcessingFailed', file, 'duplicate');\n        return false;\n      }\n\n      let fileType: string = file.type.toLowerCase();\n      let fileExtension = file.name.split('.').pop().toLowerCase();\n\n      if (this.fileTypes.length > 0) {\n        const fileTypeFound = this.fileTypes.some((type) => {\n          // Check whether the extension inside the filename is an allowed file type\n          return fileExtension === type ||\n            // If MIME type, check for wildcard or if extension matches the file's tile type\n            type.includes('/') && (\n              type.includes('*') &&\n              fileType.substring(0, type.indexOf('*')) === type.substring(0, type.indexOf('*')) ||\n              fileType === type\n            );\n        });\n        if (!fileTypeFound) {\n          this.fire('fileProcessingFailed', file, 'fileType');\n          this.fileTypeErrorCallback(file);\n          return false;\n        }\n      }\n\n      // Validate the file size against minimum and maximum allowed sizes\n      if (this.minFileSize !== undefined && file.size < this.minFileSize) {\n        this.fire('fileProcessingFailed', file, 'minFileSize');\n        this.minFileSizeErrorCallback(file);\n        return false;\n      }\n      if (this.maxFileSize !== undefined && file.size > this.maxFileSize) {\n        this.fire('fileProcessingFailed', file, 'maxFileSize');\n        this.maxFileSizeErrorCallback(file);\n        return false;\n      }\n\n      // Apply a custom validator based on the file extension\n      if (fileExtension in this.validators && !await this.validators[fileExtension](file)) {\n        this.fire('fileProcessingFailed', file, 'validation');\n        this.fileValidationErrorCallback(file);\n        return false;\n      }\n\n      return true;\n    });\n\n    const results = await Promise.all(validationPromises);\n\n    // Only include files that passed their validation tests\n    return files.filter((_v, index) => results[index]);\n  }\n\n  /**\n   * Add an array of files to this instance's file list by creating new ResumableFiles. This includes a validation and\n   * deduplication of the provided array.\n   * @param fileList An array containing File objects\n   * @param event The event with which the fileList was provided\n   */\n  private async appendFilesFromFileList(fileList: File[], event: Event): Promise<boolean> {\n    // check for uploading too many files\n    if (this.maxFiles !== undefined && this.maxFiles < fileList.length + this.files.length) {\n      // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\n      if (this.maxFiles === 1 && this.files.length === 1 && fileList.length === 1) {\n        this.removeFile(this.files[0]);\n      } else {\n        this.fire('fileProcessingFailed', undefined, 'maxFiles');\n        this.maxFilesErrorCallback(fileList);\n        return false;\n      }\n    }\n\n    // Add the unique identifier for every new file.\n    // Since this might return a promise, we have to wait until it completed.\n    const filesWithUniqueIdentifiers = await Promise.all(fileList.map(async (file: ExtendedFile): Promise<ExtendedFile> => {\n      file.uniqueIdentifier = await this.generateUniqueIdentifier(file, event);\n      return file;\n    }));\n\n    // Validate the files and remove duplicates\n    const validatedFiles = await this.validateFiles(filesWithUniqueIdentifiers);\n\n    let skippedFiles = filesWithUniqueIdentifiers.filter((file) => !validatedFiles.includes(file));\n\n    for (const file of validatedFiles) {\n      let f = new ResumableFile(file, file.uniqueIdentifier, this.opts);\n      f.on('chunkSuccess', () => this.handleChunkSuccess());\n      f.on('chunkError', () => this.handleChunkError());\n      f.on('chunkCancel', () => this.handleChunkCancel());\n      f.on('fileProgress', (...args) => this.handleFileProgress(args));\n      f.on('fileError', (...args) => this.handleFileError(args));\n      f.on('fileSuccess', (...args) => this.handleFileSuccess(args));\n      f.on('fileCancel', (...args) => this.handleFileCancel(args));\n      f.on('fileRetry', () => this.handleFileRetry());\n      this.files.push(f);\n      this.fire('fileAdded', f, event);\n    }\n\n    // all files processed, trigger event\n    if (!validatedFiles.length && !skippedFiles.length) {\n      // no succeeded files, just skip\n      return;\n    }\n    this.fire('filesAdded', validatedFiles, skippedFiles);\n  }\n\n  /**\n   * Generate a new unique identifier for a given file either with a default helper function or with a custom\n   * generator function.\n   * @param file The file as an HTML 5 File object\n   * @param event The event with which the file was provided originally\n   */\n  private generateUniqueIdentifier(file: File, event: Event): string {\n    return typeof this._generateUniqueIdentifier === 'function' ?\n      this._generateUniqueIdentifier(file, event) : Helpers.generateUniqueIdentifier(file);\n  }\n\n  /**\n   * Queue a new chunk to be uploaded that is currently awaiting upload.\n   */\n  private uploadNextChunk(): void {\n    // In some cases (such as videos) it's really handy to upload the first\n    // and last chunk of a file quickly; this lets the server check the file's\n    // metadata and determine if there's even a point in continuing.\n    if (this.prioritizeFirstAndLastChunk) {\n      for (const file of this.files) {\n        if (file.chunks.length && file.chunks[0].status === ResumableChunkStatus.PENDING) {\n          file.chunks[0].send();\n          return;\n        }\n        if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status === ResumableChunkStatus.PENDING) {\n          file.chunks[file.chunks.length - 1].send();\n          return;\n        }\n      }\n    }\n\n    // Now, simply look for the next best thing to upload\n    for (const file of this.files) {\n      if (file.upload()) return;\n    }\n  }\n\n  /**\n   *  PUBLIC METHODS FOR RESUMABLE.JS\n   *  This section only includes methods that should be callable from external packages.\n   */\n\n  /**\n   * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\n   */\n  assignBrowse(domNodes: HTMLElement | HTMLElement[], isDirectory: boolean = false): void {\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n    for (const domNode of domNodes) {\n      let input;\n      if (domNode instanceof HTMLInputElement && domNode.type === 'file') {\n        input = domNode;\n      } else {\n        input = document.createElement('input');\n        input.setAttribute('type', 'file');\n        input.style.display = 'none';\n        domNode.addEventListener('click', () => {\n          input.style.opacity = 0;\n          input.style.display = 'block';\n          input.focus();\n          input.click();\n          input.style.display = 'none';\n        }, false);\n        domNode.appendChild(input);\n      }\n      if (this.maxFiles !== 1) {\n        input.setAttribute('multiple', 'multiple');\n      } else {\n        input.removeAttribute('multiple');\n      }\n      if (isDirectory) {\n        input.setAttribute('webkitdirectory', 'webkitdirectory');\n      } else {\n        input.removeAttribute('webkitdirectory');\n      }\n      this.updateFileTypes(this.fileTypes, input);\n      // When new files are added, simply append them to the overall list\n      input.addEventListener('change', this.handleChangeEvent.bind(this), false);\n    }\n  }\n\n  /**\n   * Assign one or more DOM nodes as a drop target.\n   */\n  assignDrop(domNodes: HTMLElement | HTMLElement[]): void {\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n\n    for (const domNode of domNodes) {\n      domNode.addEventListener('dragover', this.onDragOverEnter.bind(this), false);\n      domNode.addEventListener('dragenter', this.onDragOverEnter.bind(this), false);\n      domNode.addEventListener('dragleave', this.onDragLeave.bind(this), false);\n      domNode.addEventListener('drop', this.onDrop.bind(this), false);\n    }\n  }\n\n  /**\n   * Remove one or more DOM nodes as a drop target.\n   */\n  unAssignDrop(domNodes: HTMLElement | HTMLElement[]): void {\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\n\n    for (const domNode of domNodes) {\n      domNode.removeEventListener('dragover', this.onDragOverEnter.bind(this));\n      domNode.removeEventListener('dragenter', this.onDragOverEnter.bind(this));\n      domNode.removeEventListener('dragleave', this.onDragLeave.bind(this));\n      domNode.removeEventListener('drop', this.onDrop.bind(this));\n    }\n  }\n\n  /**\n   * Update the file types allowed to upload. Optionally pass a dom node on which the accepted file types should be\n   * updated as well.\n   */\n  updateFileTypes(fileTypes: string[], domNode: HTMLInputElement = null): void {\n    if (domNode && domNode.type !== 'file') {\n      throw new Error('Dom node is not a file input.');\n    }\n\n    // Store new file types and sanitize them.\n    this.fileTypes = fileTypes;\n    this.sanitizeFileTypes();\n\n    if (domNode) {\n      if (fileTypes.length >= 1) {\n        // Set the new file types as \"accepted\" by the given dom node.\n        domNode.setAttribute('accept', this.fileTypes.map((type) => {\n          if (type.match(/^[^.][^/]+$/)) {\n            type = '.' + type;\n          }\n          return type;\n        }).join(','));\n      } else {\n        // Make all file types \"accepoted\" by the given dom node.\n        domNode.removeAttribute('accept');\n      }\n    }\n  }\n\n  /**\n   * Check whether any files are currently uploading\n   */\n  get isUploading(): boolean {\n    return this.files.some((file) => file.isUploading);\n  }\n\n  /**\n   * Start or resume the upload of the provided files by initiating the upload of the first chunk\n   */\n  upload(): void {\n    // Make sure we don't start too many uploads at once\n    if (this.isUploading) return;\n    // Kick off the queue\n    this.fire('uploadStart');\n    for (let num = 1; num <= this.simultaneousUploads; num++) {\n      this.uploadNextChunk();\n    }\n  }\n\n  /**\n   * Pause the upload\n   */\n  pause(): void {\n    // Resume all chunks currently being uploaded\n    for (const file of this.files) {\n      file.abort();\n    }\n    this.fire('pause');\n  };\n\n  /**\n   * Cancel uploading and reset all files to their initial states\n   */\n  cancel(): void {\n    this.fire('beforeCancel');\n    for (let i = this.files.length - 1; i >= 0; i--) {\n      this.files[i].cancel();\n    }\n    this.fire('cancel');\n  };\n\n  /**\n   * Return the progress of the current upload as a float between 0 and 1\n   */\n  progress(): number {\n    let totalDone = this.files.reduce((accumulator, file) => accumulator + file.size * file.progress(), 0);\n    let totalSize = this.getSize();\n    return totalSize > 0 ? totalDone / totalSize : 0;\n  };\n\n  /**\n   * Add a HTML5 File object to the list of files.\n   */\n  addFile(file: File, event: Event): void {\n    this.appendFilesFromFileList([file], event);\n  };\n\n  /**\n   * Add a list of HTML5 File objects to the list of files.\n   */\n  addFiles(files: File[], event: Event): void {\n    this.appendFilesFromFileList(files, event);\n  };\n\n  /**\n   * Add a validator function for the given file type. This can e.g. be used to read the file and validate\n   * checksums based on certain properties.\n   * @param fileType The file extension for the given validator\n   * @param validator A callback function that should be called when validating files with the given type\n   */\n  addFileValidator(fileType: string, validator: Function): void {\n    if (fileType in this.validators) {\n      console.warn(`Overwriting validator for file type: ${fileType}`);\n    }\n    this.validators[fileType] = validator;\n  }\n\n  /**\n   * Cancel the upload of a specific ResumableFile object and remove it from the file list.\n   */\n  removeFile(file: ResumableFile): void {\n    for (let i = this.files.length - 1; i >= 0; i--) {\n      if (this.files[i] === file) {\n        this.files.splice(i, 1);\n        break;\n      }\n    }\n  };\n\n  /**\n   * Retrieve a ResumableFile object from the file list by its unique identifier.\n   */\n  getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile {\n    return this.files.find((file) => file.uniqueIdentifier === uniqueIdentifier);\n  };\n\n  /**\n   * Get the combined size of all files for the upload\n   */\n  getSize(): number {\n    return this.files.reduce((accumulator, file) => accumulator + file.size, 0);\n  }\n\n  /**\n   * Call the event handler when a file is dropped on the drag-and-drop area\n   */\n  handleDropEvent(e: DragEvent): void {\n    this.onDrop(e);\n  }\n  /**\n   * Call the event handler when the provided input element changes (i.e. receives one or multiple files.\n   */\n  handleChangeEvent(e: InputEvent): void {\n    const eventTarget = e.target as HTMLInputElement;\n    this.fire('fileProcessingBegin', eventTarget.files);\n    this.appendFilesFromFileList([...eventTarget.files as any], e);\n    if (this.clearInput) {\n      eventTarget.value = '';\n    }\n  }\n\n  /**\n   * Check whether the upload is completed, i.e. if all files were uploaded successfully.\n   */\n  checkUploadComplete(): void {\n    let uploadCompleted = this.files.every((file) => file.isComplete);\n    if (uploadCompleted) {\n      // All chunks have been uploaded, complete\n      this.fire('complete');\n    }\n  }\n\n  /**\n   * Event Handlers: This section should only include methods that are used to\n   * handle events coming from the files or chunks.\n   */\n\n  /**\n   * The event handler when a chunk was uploaded successfully\n   */\n  private handleChunkSuccess(): void {\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when a chunk was uploaded successfully\n   */\n  private handleChunkError(): void {\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when an error occurred during the upload of a chunk\n   */\n  private handleChunkCancel(): void {\n    this.uploadNextChunk();\n  }\n\n  /**\n   * The event handler when an error occurred during the upload of a file\n   */\n  private handleFileError(args: any[]): void {\n    this.fire('error', args[1], args[0]);\n  }\n\n  /**\n   * The event handler when all chunks from a file were uploaded successfully\n   */\n  private handleFileSuccess(args: any[]): void {\n    this.fire('fileSuccess', ...args);\n    this.checkUploadComplete();\n  }\n\n  /**\n   * The event handler when a file progress event was received\n   */\n  private handleFileProgress(args: any[]): void {\n    this.fire('fileProgress', ...args);\n    this.fire('progress');\n  }\n\n  /**\n   * The event handler when the upload of a file was canceled\n   */\n  private handleFileCancel(args: any[]): void {\n    this.removeFile(args[0])\n  }\n\n  /**\n   * The event handler, when the retry of a file was initiated\n   */\n  private handleFileRetry(): void {\n    this.upload();\n  }\n}\n","import Helpers from './resumableHelpers';\nimport ResumableEventHandler from './resumableEventHandler';\nimport ResumableFile from './resumableFile';\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/**\n * A file chunk that contains all the data that for a single upload request\n */\nexport default class ResumableChunk extends ResumableEventHandler {\n  private fileObj: ResumableFile;\n  private fileObjSize: number;\n  private fileObjType: string;\n  private offset: number;\n  private lastProgressCallback: Date = new Date;\n  private tested: boolean = false;\n  private retries: number = 0;\n  private pendingRetry: boolean = false;\n  private isMarkedComplete: boolean = false;\n  private loaded: number = 0;\n  private startByte: number;\n  private endByte: number;\n  private xhr: XMLHttpRequest = null;\n\n  // Option properties\n  private chunkSize: number = 1024 * 1024; // 1 MB\n  private fileParameterName: string = 'file';\n  chunkNumberParameterName: string = 'resumableChunkNumber';\n  chunkSizeParameterName: string = 'resumableChunkSize';\n  currentChunkSizeParameterName: string = 'resumableCurrentChunkSize';\n  totalSizeParameterName: string = 'resumableTotalSize';\n  typeParameterName: string = 'resumableType';\n  identifierParameterName: string = 'resumableIdentifier';\n  fileNameParameterName: string = 'resumableFilename';\n  relativePathParameterName: string = 'resumableRelativePath';\n  totalChunksParameterName: string = 'resumableTotalChunks';\n  throttleProgressCallbacks: number = 0.5;\n  query: object = {};\n  headers: object = {};\n  method: string = 'multipart';\n  uploadMethod: string = 'POST';\n  testMethod: string = 'GET';\n  parameterNamespace: string = '';\n  testChunks: boolean = true;\n  maxChunkRetries: number = 100;\n  chunkRetryInterval?: number = undefined;\n  permanentErrors: number[] = [400, 401, 403, 404, 409, 415, 500, 501];\n  withCredentials: boolean = false;\n  xhrTimeout: number = 0;\n  chunkFormat: string = 'blob';\n  setChunkTypeFromFile: boolean = false;\n  target: string = '/';\n  testTarget: string = '';\n\n\n  constructor(fileObj: ResumableFile, offset: number, options: ResumableConfiguration) {\n    super();\n    this.setInstanceProperties(options);\n    this.fileObj = fileObj;\n    this.fileObjSize = fileObj.size;\n    this.fileObjType = fileObj.file.type;\n    this.offset = offset;\n\n    // Computed properties\n    this.startByte = this.offset * this.chunkSize;\n    this.endByte = Math.min(this.fileObjSize, (this.offset + 1) * this.chunkSize);\n    this.xhr = null;\n  }\n\n  /**\n   * Set the options provided inside the configuration object on this instance\n   */\n  protected setInstanceProperties(options: ResumableConfiguration): void {\n    Object.assign(this, options);\n  }\n\n  /**\n   * Set the header values for the current XMLHttpRequest\n   */\n  setCustomHeaders(): void {\n    if (!this.xhr) {\n      return;\n    }\n    let customHeaders = this.headers;\n    if (customHeaders instanceof Function) {\n      customHeaders = customHeaders(this.fileObj, this);\n    }\n    for (const header in customHeaders) {\n      if (!customHeaders.hasOwnProperty(header)) continue;\n      this.xhr.setRequestHeader(header, customHeaders[header]);\n    }\n  }\n\n  /**\n   * Get query parameters for this chunk as an object, combined with custom parameters if provided\n   */\n  get formattedQuery(): object {\n    var customQuery = this.query;\n    if (typeof customQuery == 'function') customQuery = customQuery(this.fileObj, this);\n\n    // Add extra data to identify chunk\n    const extraData = {\n      // define key/value pairs for additional parameters\n      [this.chunkNumberParameterName]: this.offset + 1,\n      [this.chunkSizeParameterName]: this.chunkSize,\n      [this.currentChunkSizeParameterName]: this.endByte - this.startByte,\n      [this.totalSizeParameterName]: this.fileObjSize,\n      [this.typeParameterName]: this.fileObjType,\n      [this.identifierParameterName]: this.fileObj.uniqueIdentifier,\n      [this.fileNameParameterName]: this.fileObj.fileName,\n      [this.relativePathParameterName]: this.fileObj.relativePath,\n      [this.totalChunksParameterName]: this.fileObj.chunks.length,\n    };\n    return {...extraData, ...customQuery};\n  }\n\n  /**\n   * Determine the status for this Chunk based on different parameters of the underlying XMLHttpRequest\n   */\n  get status(): ResumableChunkStatus {\n    if (this.pendingRetry) {\n      // if pending retry then that's effectively the same as actively uploading,\n      // there might just be a slight delay before the retry starts\n      return ResumableChunkStatus.UPLOADING;\n    } else if (this.isMarkedComplete) {\n      return ResumableChunkStatus.SUCCESS;\n    } else if (!this.xhr) {\n      return ResumableChunkStatus.PENDING;\n    } else if (this.xhr.readyState < 4) {\n      // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\n      return ResumableChunkStatus.UPLOADING;\n    } else if (this.xhr.status === 200 || this.xhr.status === 201) {\n      // HTTP 200, 201 (created)\n      return ResumableChunkStatus.SUCCESS;\n    } else if (this.permanentErrors.includes(this.xhr.status) || this.retries >= this.maxChunkRetries) {\n      // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\n      return ResumableChunkStatus.ERROR;\n    } else {\n      // this should never happen, but we'll reset and queue a retry\n      // a likely case for this would be 503 service unavailable\n      this.abort();\n      return ResumableChunkStatus.PENDING;\n    }\n  };\n\n  /**\n   * Get the target url for the specified request type and the configured parameters of this chunk\n   * @param requestType The type of the request, either 'test' or 'upload'\n   */\n  getTarget(requestType: string): string {\n    return Helpers.getTarget(requestType, this.target, this.testTarget, this.formattedQuery, this.parameterNamespace);\n  }\n\n  /**\n   * Makes a GET request without any data to see if the chunk has already been uploaded in a previous session\n   */\n  test(): void {\n    // Set up request and listen for event\n    this.xhr = new XMLHttpRequest();\n\n    var testHandler = () => {\n      this.tested = true;\n      var status = this.status;\n      if (status === ResumableChunkStatus.SUCCESS) {\n        this.fire('chunkSuccess', this.message());\n      } else {\n        this.send();\n      }\n    };\n    this.xhr.addEventListener('load', testHandler, false);\n    this.xhr.addEventListener('error', testHandler, false);\n    this.xhr.addEventListener('timeout', testHandler, false);\n\n    // Append the relevant chunk and send it\n    this.xhr.open(this.testMethod, this.getTarget('test'));\n    this.xhr.timeout = this.xhrTimeout;\n    this.xhr.withCredentials = this.withCredentials;\n    // Add data from header options\n    this.setCustomHeaders();\n\n    this.xhr.send(null);\n  }\n\n  /**\n   * Abort and reset a request\n   */\n  abort(): void {\n    if (this.xhr) this.xhr.abort();\n    this.xhr = null;\n  }\n\n  /**\n   *  Uploads the actual data in a POST call\n   */\n  send(): void {\n    if (this.testChunks && !this.tested) {\n      this.test();\n      return;\n    }\n\n    // Set up request and listen for event\n    this.xhr = new XMLHttpRequest();\n\n    // Progress\n    this.xhr.upload.addEventListener('progress', (e: ProgressEvent<XMLHttpRequestEventTarget>) => {\n      if (Date.now() - this.lastProgressCallback.getTime() > this.throttleProgressCallbacks * 1000) {\n        this.fire('chunkProgress');\n        this.lastProgressCallback = new Date();\n      }\n      this.loaded = e.loaded || 0;\n    }, false);\n    this.loaded = 0;\n    this.pendingRetry = false;\n    this.fire('chunkProgress');\n\n    /**\n     * Handles the different xhr events based on the status of this chunk\n     */\n    let doneHandler = () => {\n      var status = this.status;\n      switch (status) {\n        case ResumableChunkStatus.SUCCESS:\n        case ResumableChunkStatus.ERROR:\n          this.fire(status, this.message());\n          break;\n        default:\n          this.fire('chunkRetry', this.message());\n          this.abort();\n          this.retries++;\n          let retryInterval = this.chunkRetryInterval;\n          if (retryInterval !== undefined) {\n            this.pendingRetry = true;\n            setTimeout(this.send, retryInterval);\n          } else {\n            this.send();\n          }\n          break;\n      }\n    };\n    this.xhr.addEventListener('load', doneHandler, false);\n    this.xhr.addEventListener('error', doneHandler, false);\n    this.xhr.addEventListener('timeout', doneHandler, false);\n\n    // Set up the basic query data from Resumable\n    let bytes = this.fileObj.file.slice(this.startByte, this.endByte,\n      this.setChunkTypeFromFile ? this.fileObj.file.type : '');\n    let data = null;\n    let parameterNamespace = this.parameterNamespace;\n    // Add data from the query options\n    if (this.method === 'octet') {\n      data = bytes;\n    } else {\n      data = new FormData();\n      for (const queryKey in this.formattedQuery) {\n        data.append(parameterNamespace + queryKey, this.formattedQuery[queryKey]);\n      }\n      switch (this.chunkFormat) {\n        case 'blob':\n          data.append(parameterNamespace + this.fileParameterName, bytes, this.fileObj.fileName);\n          break;\n        case 'base64':\n          var fr = new FileReader();\n          fr.onload = () => {\n            data.append(parameterNamespace + this.fileParameterName, fr.result);\n            this.xhr.send(data);\n          };\n          fr.readAsDataURL(bytes);\n          break;\n      }\n    }\n\n    let target = this.getTarget('upload');\n\n    this.xhr.open(this.uploadMethod, target);\n    if (this.method === 'octet') {\n      this.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\n    }\n    this.xhr.timeout = this.xhrTimeout;\n    this.xhr.withCredentials = this.withCredentials;\n    // Add data from header options\n    this.setCustomHeaders();\n\n    if (this.chunkFormat === 'blob') {\n      this.xhr.send(data);\n    }\n  }\n\n  /**\n   * Return the response text of the underlying XMLHttpRequest if it exists\n   */\n  message(): string {\n    return this.xhr ? this.xhr.responseText : '';\n  };\n\n  /**\n   * Return the progress for the current chunk as a number between 0 and 1\n   * @param relative Whether or not the progress should be calculated based on the size of the entire file\n   */\n  progress(relative: boolean = false): number {\n    var factor = relative ? (this.endByte - this.startByte) / this.fileObjSize : 1;\n    if (this.pendingRetry) return 0;\n    if ((!this.xhr || !this.xhr.status) && !this.isMarkedComplete) factor *= .95;\n    switch (this.status) {\n      case ResumableChunkStatus.SUCCESS:\n      case ResumableChunkStatus.ERROR:\n        return factor;\n      case ResumableChunkStatus.PENDING:\n        return 0;\n      default:\n        return this.loaded / (this.endByte - this.startByte) * factor;\n    }\n  }\n\n  /**\n   * Mark this chunk as completed because it was already uploaded to the server.\n   */\n  markComplete(): void {\n    this.isMarkedComplete = true;\n  }\n}\n","/**\n * The underlying base class for ResumableJS. This class is responsible for registering and executing\n * events and listeners.\n */\nexport default class ResumableEventHandler {\n  private registeredEventHandlers: { [event: string]: Function[]};\n\n  /**\n   * Construct a new event handler instance.\n   */\n  constructor() {\n    this.registeredEventHandlers = {};\n  }\n\n  /**\n   * Register a new callback for the given event.\n   */\n  on(event: string, callback: Function): void {\n    event = event.toLowerCase();\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) {\n      this.registeredEventHandlers[event] = [];\n    }\n    this.registeredEventHandlers[event].push(callback);\n  }\n\n  /**\n   * Fire the event listeners for the given event with the given arguments as well as the wildcard event '*'\n   */\n  fire(event: string, ...args): void {\n    event = event.toLowerCase();\n\n    this.executeEventCallback(event, ...args);\n    this.executeEventCallback('*', event, ...args);\n  }\n\n  /**\n   * Execute all callbacks for the given event with the provided arguments. This function is only used internally\n   * to call all callbacks registered to a given event individually.\n   */\n  private executeEventCallback(event: string, ...args): void {\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) return;\n    this.registeredEventHandlers[event].forEach((callback) => callback(...args));\n  }\n}\n","import ResumableChunk from './resumableChunk';\nimport Helpers from './resumableHelpers';\nimport ResumableEventHandler from './resumableEventHandler';\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\n\n/**\n * A single file object that should be uploaded in multiple chunks\n */\nexport default class ResumableFile extends ResumableEventHandler {\n  private opts: ResumableConfiguration;\n  private _prevProgress: number = 0;\n  private isPaused: boolean = false;\n\n  file: File;\n  fileName: string;\n  size: number;\n  relativePath: string;\n  uniqueIdentifier: string;\n  private _error: boolean;\n  chunks: ResumableChunk[] = [];\n  private chunkSize: number = 1024 * 1024; // 1 MB\n\n  constructor(file: File, uniqueIdentifier: string, options: object) {\n    super();\n    this.opts = options;\n    this.setInstanceProperties(options);\n    this.file = file;\n    this.fileName = file.name;\n    this.size = file.size;\n    this.relativePath = /*file.relativePath ||*/ file.webkitRelativePath || this.fileName;\n    this.uniqueIdentifier = uniqueIdentifier;\n    this._error = uniqueIdentifier !== undefined;\n\n    // Bootstrap file\n    this.fire('chunkingStart', this);\n    this.bootstrap();\n  }\n\n  /**\n   * Set the options provided inside the configuration object on this instance\n   */\n  protected setInstanceProperties(options: ResumableConfiguration) {\n    Object.assign(this, options);\n  }\n\n  /**\n   * Stop current uploads for this file\n   */\n  abort(): void {\n    let abortCount = 0;\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\n        chunk.abort();\n        abortCount++;\n      }\n    }\n    if (abortCount > 0) this.fire('fileProgress', this);\n  }\n\n  /**\n   * Cancel uploading this file and remove it from the file list\n   */\n  cancel(): void {\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\n        chunk.abort();\n        this.fire('chunkCancel', chunk);\n      }\n    }\n    // Reset this file to be void\n    this.chunks = [];\n    this.fire('fileCancel', this);\n    this.fire('fileProgress', this);\n  }\n\n  /**\n   * Retry uploading this file\n   */\n  retry(): void {\n    this.bootstrap();\n    let firedRetry = false;\n    this.on('chunkingComplete', () => {\n      if (!firedRetry) this.fire('fileRetry');\n      firedRetry = true;\n    });\n  }\n\n  /**\n   * Prepare this file for a new upload, by dividing it into multiple chunks\n   */\n  bootstrap(): void {\n    const progressHandler = (message) => this.fire('fileProgress', this, message);\n    const retryHandler = () =>  this.fire('fileRetry', this);\n    const successHandler = (message) => {\n      if (this._error) return;\n      this.fire('chunkSuccess');\n      this.fire('fileProgress', this, message); // it's at least progress\n      if (this.isComplete) {\n        this.fire('fileSuccess', this, message);\n      }\n    };\n    const errorHandler = (message) => {\n      this.fire('chunkError', message);\n      this.abort();\n      this._error = true;\n      this.chunks = [];\n      this.fire('fileError', this, message);\n    }\n\n    this.abort();\n    this._error = false;\n    // Rebuild stack of chunks from file\n    this.chunks = [];\n    this._prevProgress = 0;\n    const maxOffset = Math.max(Math.ceil(this.file.size / this.chunkSize), 1);\n    for (var offset = 0; offset < maxOffset; offset++) {\n      const chunk = new ResumableChunk(this, offset, this.opts);\n      chunk.on('chunkProgress', progressHandler);\n      chunk.on('chunkError', errorHandler);\n      chunk.on('chunkSuccess', successHandler);\n      chunk.on('chunkRetry', retryHandler);\n      this.chunks.push(chunk);\n      this.fire('chunkingProgress', this, offset / maxOffset);\n    }\n    this.fire('chunkingComplete', this);\n  }\n\n  /**\n   * Get the progress for uploading this file based on the progress of the individual file chunks\n   */\n  progress(): number {\n    if (this._error) return 1;\n    // Sum up progress across everything\n    var ret = 0;\n    var error = false;\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.ERROR) error = true;\n      ret += chunk.progress(true); // get chunk progress relative to entire file\n    }\n    ret = error ? 1 : (ret > 0.99999 ? 1 : ret);\n    ret = Math.max(this._prevProgress, ret); // We don't want to lose percentages when an upload is paused\n    this._prevProgress = ret;\n    return ret;\n  }\n\n  /**\n   * Check whether at least one of this file's chunks is currently uploading\n   */\n  get isUploading(): boolean {\n    return this.chunks.some((chunk) => chunk.status === ResumableChunkStatus.UPLOADING);\n  }\n\n  /**\n   * Check whether all of this file's chunks completed their upload requests and whether it should be\n   * treated as completed.\n   */\n  get isComplete(): boolean {\n    return !this.chunks.some((chunk) =>\n      chunk.status === ResumableChunkStatus.PENDING || chunk.status === ResumableChunkStatus.UPLOADING);\n  }\n\n  /**\n   * Initiate the upload of a new chunk for this file. This function returns whether a new upload was started or not.\n   */\n  upload(): boolean {\n    if (this.isPaused) {\n      return false;\n    }\n\n    for (const chunk of this.chunks) {\n      if (chunk.status === ResumableChunkStatus.PENDING) {\n        chunk.send();\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Mark a given number of chunks as already uploaded to the server.\n   * @param chunkNumber The index until which all chunks should be marked as completed\n   */\n  markChunksCompleted(chunkNumber: number): void {\n    if (!this.chunks || this.chunks.length <= chunkNumber) {\n      return;\n    }\n    for (let num = 0; num < chunkNumber; num++) {\n      this.chunks[num].markComplete();\n    }\n  }\n}\n","// INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\nimport {ExtendedFile} from \"./types/types\";\n\nexport default class ResumableHelpers {\n  /**\n   * Stop the propagation and default behavior of the given event `e`.\n   */\n  static stopEvent(e: Event): void {\n    e.stopPropagation();\n    e.preventDefault();\n  }\n\n  /**\n   * Generate a unique identifier for the given file based on its size, filename and relative path.\n   * @param {ExtendedFile} file The file for which the identifier should be generated\n   * @returns {string} The unique identifier for the given file object\n   */\n  static generateUniqueIdentifier(file: ExtendedFile): string {\n    let relativePath = file.webkitRelativePath || file.relativePath || file.name;\n    // The '/' is used to display the relative path of the file. This information should be preserved\n    relativePath = relativePath.replace('/', '-');\n    // Remove special characters\n    return (file.size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\n  }\n\n  /**\n   * Flatten the given array and all contained subarrays.\n   * Credit: {@link https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep}\n   */\n  static flattenDeep(array: any[]): any[] {\n    return Array.isArray(array)\n      ? array.reduce((a, b) => a.concat(this.flattenDeep(b)), [])\n      : [array];\n  }\n\n  /**\n   * Filter the given array based on the predicate inside `callback`\n   * and executes `errorCallback` for duplicate elements.\n   */\n  static uniqBy(array: any[], callback: Function, errorCallback: Function): any[] {\n    let seen = new Set();\n    return array.filter((item) => {\n      let k = callback(item);\n      if (seen.has(k)) {\n        errorCallback(item);\n        return false;\n      } else {\n        seen.add(k);\n        return true;\n      }\n    });\n  }\n\n  /**\n   * Format the size given in Bytes in a human readable format.\n   */\n  static formatSize(size: number): string {\n    if (size < 1024) {\n      return size + ' bytes';\n    }\n    if (size < 1024 * 1024) {\n      return (size / 1024.0).toFixed(0) + ' KB';\n    }\n    if (size < 1024 * 1024 * 1024) {\n      return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\n    }\n    return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\n  }\n\n  /**\n   * Get the target url for the specified request type and params\n   */\n  static getTarget(\n    requestType: string,\n    sendTarget: string,\n    testTarget: string,\n    params: object,\n    parameterNamespace: string = ''\n  ) {\n    let target = sendTarget;\n\n    if (requestType === 'test' && testTarget) {\n      target = testTarget === '/' ? sendTarget : testTarget;\n    }\n\n    let separator = target.indexOf('?') < 0 ? '?' : '&';\n    let joinedParams = Object.entries(params).map(([key, value]) => [\n      encodeURIComponent(parameterNamespace + key),\n      encodeURIComponent(value),\n    ].join('=')).join('&');\n\n    if (joinedParams) target = target + separator + joinedParams;\n\n    return target;\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(603);\n"],"names":["root","factory","exports","module","define","amd","this","Resumable","constructor","options","super","files","validators","clearInput","dragOverClass","fileTypes","fileTypeErrorCallback","file","alert","fileName","name","_generateUniqueIdentifier","maxFileSizeErrorCallback","formatSize","maxFileSize","maxFilesErrorCallback","maxFiles","minFileSize","minFileSizeErrorCallback","prioritizeFirstAndLastChunk","fileValidationErrorCallback","simultaneousUploads","setInstanceProperties","opts","checkSupport","support","undefined","File","Blob","FileList","prototype","slice","Error","Object","assign","sanitizeFileTypes","map","type","replace","toLowerCase","mapDirectoryItemToFile","item","path","isFile","Promise","resolve","reject","relativePath","isDirectory","processDirectory","console","warn","mapDragItemToFile","entry","webkitGetAsEntry","getAsFile","directory","dirReader","createReader","allEntries","readEntries","entries","length","concat","all","onDrop","e","currentTarget","classList","remove","stopEvent","items","dataTransfer","fire","promises","flattenDeep","appendFilesFromFileList","onDragLeave","onDragOverEnter","preventDefault","dt","types","includes","stopPropagation","dropEffect","effectAllowed","add","validateFiles","validationPromises","uniqBy","uniqueIdentifier","some","addedFile","fileType","fileExtension","split","pop","substring","indexOf","size","results","filter","_v","index","fileList","event","removeFile","filesWithUniqueIdentifiers","generateUniqueIdentifier","validatedFiles","skippedFiles","f","on","handleChunkSuccess","handleChunkError","handleChunkCancel","args","handleFileProgress","handleFileError","handleFileSuccess","handleFileCancel","handleFileRetry","push","uploadNextChunk","chunks","status","send","upload","assignBrowse","domNodes","HTMLElement","domNode","input","HTMLInputElement","document","createElement","setAttribute","style","display","addEventListener","opacity","focus","click","appendChild","removeAttribute","updateFileTypes","handleChangeEvent","bind","assignDrop","unAssignDrop","removeEventListener","match","join","isUploading","num","pause","abort","cancel","i","progress","totalDone","reduce","accumulator","totalSize","getSize","addFile","addFiles","addFileValidator","validator","splice","getFromUniqueIdentifier","find","handleDropEvent","eventTarget","target","value","checkUploadComplete","every","isComplete","ResumableChunk","fileObj","offset","lastProgressCallback","Date","tested","retries","pendingRetry","isMarkedComplete","loaded","xhr","chunkSize","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","method","uploadMethod","testMethod","parameterNamespace","testChunks","maxChunkRetries","chunkRetryInterval","permanentErrors","withCredentials","xhrTimeout","chunkFormat","setChunkTypeFromFile","testTarget","fileObjSize","fileObjType","startByte","endByte","Math","min","setCustomHeaders","customHeaders","Function","header","hasOwnProperty","setRequestHeader","formattedQuery","customQuery","extraData","readyState","getTarget","requestType","test","XMLHttpRequest","testHandler","message","open","timeout","now","getTime","doneHandler","retryInterval","setTimeout","bytes","data","FormData","queryKey","append","fr","FileReader","onload","result","readAsDataURL","responseText","relative","factor","markComplete","registeredEventHandlers","callback","executeEventCallback","forEach","ResumableFile","_prevProgress","isPaused","webkitRelativePath","_error","bootstrap","abortCount","chunk","retry","firedRetry","progressHandler","retryHandler","successHandler","errorHandler","maxOffset","max","ceil","ret","error","markChunksCompleted","chunkNumber","static","array","Array","isArray","a","b","errorCallback","seen","Set","k","has","toFixed","sendTarget","params","separator","joinedParams","key","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}