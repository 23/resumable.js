{"version":3,"file":"main.js","mappings":"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","sources":["webpack://resumablejs/webpack/universalModuleDefinition","webpack://resumablejs/./src/resumable.ts","webpack://resumablejs/./src/resumableChunk.ts","webpack://resumablejs/./src/resumableEventHandler.ts","webpack://resumablejs/./src/resumableFile.ts","webpack://resumablejs/./src/resumableHelpers.ts","webpack://resumablejs/webpack/bootstrap","webpack://resumablejs/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"resumablejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"resumablejs\"] = factory();\n\telse\n\t\troot[\"resumablejs\"] = factory();\n})(this, function() {\nreturn ","import Helpers from './resumableHelpers';\r\nimport ResumableFile from './resumableFile';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ExtendedFile, ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/*\r\n* MIT Licensed\r\n* http://www.twentythree.com/\r\n* http://github.com/23/resumable.js\r\n* Steffen Tiedemann Christensen, steffen@twentythree.com\r\n*/\r\n\r\n/**\r\n * An instance of a resumable upload handler that contains one or multiple files which should be uploaded in chunks.\r\n */\r\nexport class Resumable extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private files: ResumableFile[] = [];\r\n  private validators: {[fileType: string]: Function} = {};\r\n  private support: boolean;\r\n\r\n  // Configuration Options\r\n  clearInput: boolean = true;\r\n  dragOverClass: string = 'dragover';\r\n  fileTypes: string[] = [];\r\n  fileTypeErrorCallback: Function = (file) => {\r\n    alert(`${file.fileName || file.name} has an unsupported file type, please upload files of type ${this.fileTypes}.`);\r\n  };\r\n  _generateUniqueIdentifier: Function = null;\r\n  maxFileSize?: number;\r\n  maxFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too large, please upload files less than ' +\r\n      Helpers.formatSize(this.maxFileSize) + '.');\r\n  };\r\n  maxFiles?: number;\r\n  maxFilesErrorCallback: Function = (files) => {\r\n    var maxFiles = this.maxFiles;\r\n    alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\r\n  };\r\n  minFileSize: number = 1;\r\n  minFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too small, please upload files larger than ' +\r\n      Helpers.formatSize(this.minFileSize) + '.');\r\n  };\r\n  prioritizeFirstAndLastChunk: boolean = false;\r\n  fileValidationErrorCallback: Function = (file) => {};\r\n  simultaneousUploads: number = 3;\r\n\r\n  constructor(options: ResumableConfiguration = {}) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.opts = options;\r\n    this.checkSupport();\r\n  }\r\n\r\n  /**\r\n   * Check whether the current browser supports the essential functions for the package to work.\r\n   * The method checks if these features are supported:\r\n   * - File object type\r\n   * - Blob object type\r\n   * - FileList object type\r\n   * - slicing files\r\n   */\r\n  private checkSupport(): void {\r\n    this.support =\r\n      File !== undefined &&\r\n      Blob !== undefined &&\r\n      FileList !== undefined &&\r\n      !!Blob.prototype.slice;\r\n    if (!this.support) {\r\n      throw new Error('Not supported by Browser');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign the attributes of this instance via destructuring of the options object.\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n\r\n    // For good behaviour we do some initial sanitizing. Remove spaces and dots and lowercase all\r\n    this.fileTypes = this.fileTypes.map((type) => type.replace(/[\\s.]/g, '').toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * Transforms a single fileEntry or directoryEntry item into a list of File objects this method is used to convert\r\n   * entries found inside dragged-and-dropped directories.\r\n   * @param {Object} item item to upload, may be file or directory entry\r\n   * @param {string} path current file path\r\n   */\r\n  private async mapDirectoryItemToFile(item: FileSystemEntry, path: string): Promise<File[]> {\r\n    if (item.isFile) {\r\n      // file entry provided\r\n      const file = await new Promise(\r\n        (resolve, reject) => (item as FileSystemFileEntry).file(resolve, reject)\r\n      ) as ExtendedFile;\r\n      file.relativePath = path + file.name;\r\n      return [file];\r\n    } else if (item.isDirectory) {\r\n      // directory entry provided\r\n      return await this.processDirectory(item as FileSystemDirectoryEntry, path + item.name + '/');\r\n    } else if (item instanceof File) {\r\n      return [item];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Transforms a single DataTransfer item into a File object. This may include either extracting the given file or\r\n   * all files inside the provided directory.\r\n   * @param item item to upload, may be file or directory entry\r\n   * @param path current file path\r\n   */\r\n  private async mapDragItemToFile(item: DataTransferItem, path: string): Promise<File[]> {\r\n    let entry = item.webkitGetAsEntry();\r\n    if (entry.isDirectory) {\r\n      return await this.processDirectory(entry as FileSystemDirectoryEntry, path + entry.name + '/');\r\n    }\r\n\r\n    let file = item.getAsFile();\r\n    if (file instanceof File) {\r\n      (file as ExtendedFile).relativePath = path + file.name;\r\n      return [file];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Recursively traverse a directory and collect files to upload\r\n   */\r\n  private processDirectory(directory: FileSystemDirectoryEntry, path: string): Promise<File[]> {\r\n    return new Promise((resolve, reject) => {\r\n      const dirReader = directory.createReader();\r\n      let allEntries = [];\r\n\r\n      const readEntries = (): void => {\r\n        dirReader.readEntries(async (entries: FileSystemEntry[]): Promise<void> => {\r\n          // Read the files batch-wise (in chrome e.g. 100 at a time)\r\n          if (entries.length) {\r\n            allEntries = allEntries.concat(entries);\r\n            return readEntries();\r\n          }\r\n\r\n          // After collecting all files, map all fileEntries to File objects\r\n          allEntries = allEntries.map((entry) => {\r\n            return this.mapDirectoryItemToFile(entry, path);\r\n          });\r\n          // Wait until all files are collected.\r\n          resolve(await Promise.all(allEntries));\r\n        }, reject);\r\n      };\r\n\r\n      readEntries();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a new file was provided via drag-and-drop\r\n   */\r\n  private async onDrop(e: DragEvent): Promise<void> {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n    Helpers.stopEvent(e);\r\n\r\n    let items = [];\r\n\r\n    //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\r\n    if (e.dataTransfer && e.dataTransfer.items) {\r\n      items = [...e.dataTransfer.items as any];\r\n    }\r\n    //else handle them as files\r\n    else if (e.dataTransfer && e.dataTransfer.files) {\r\n      items =  [...e.dataTransfer.files as any];\r\n    }\r\n\r\n    if (!items.length) {\r\n      return; // nothing to do\r\n    }\r\n    this.fire('fileProcessingBegin', items);\r\n    let promises = items.map((item) => this.mapDragItemToFile(item, ''));\r\n    let files = Helpers.flattenDeep(await Promise.all(promises));\r\n    if (files.length) {\r\n      // at least one file found\r\n      this.appendFilesFromFileList(files, e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item leaves the area of assigned drag-and-drop area\r\n   */\r\n  private onDragLeave(e: DragEvent): void {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item enters the area of assigned drag-and-drop area\r\n   */\r\n  private onDragOverEnter(e: DragEvent): void {\r\n    e.preventDefault();\r\n    let dt = e.dataTransfer;\r\n    if (dt.types.includes('Files')) { // only for file drop\r\n      e.stopPropagation();\r\n      dt.dropEffect = 'copy';\r\n      dt.effectAllowed = 'copy';\r\n      (e.currentTarget as HTMLElement).classList.add(this.dragOverClass);\r\n    } else {\r\n      dt.dropEffect = 'none';\r\n      dt.effectAllowed = 'none';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate and clean a list of files. This includes the removal of duplicates, a check whether the file type is\r\n   * allowed and custom validation functions defined per file type.\r\n   * @param {ExtendedFile[]} files A list of File instances that were previously extended with a uniqueIdentifier\r\n   */\r\n  private async validateFiles(files: ExtendedFile[]): Promise<ExtendedFile[]> {\r\n    // Remove files that are duplicated in the original array, based on their unique identifiers\r\n    let uniqueFiles = Helpers.uniqBy(files,\r\n      (file) => file.uniqueIdentifier,\r\n      (file) => this.fire('fileProcessingFailed', file, 'duplicate'),\r\n    );\r\n\r\n    let validationPromises = uniqueFiles.map(async (file) => {\r\n      // Remove files that were already added based on their unique identifiers\r\n      if (this.files.some((addedFile) => addedFile.uniqueIdentifier === file.uniqueIdentifier)) {\r\n        this.fire('fileProcessingFailed', file, 'duplicate');\r\n        return false;\r\n      }\r\n\r\n      let fileType: string = file.type.toLowerCase();\r\n      let fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (this.fileTypes.length > 0) {\r\n        const fileTypeFound = this.fileTypes.some((type) => {\r\n          // Check whether the extension inside the filename is an allowed file type\r\n          return fileExtension === type ||\r\n            // If MIME type, check for wildcard or if extension matches the file's tile type\r\n            type.includes('/') && (\r\n              type.includes('*') &&\r\n              fileType.substring(0, type.indexOf('*')) === type.substring(0, type.indexOf('*')) ||\r\n              fileType === type\r\n            );\r\n        });\r\n        if (!fileTypeFound) {\r\n          this.fire('fileProcessingFailed', file, 'fileType');\r\n          this.fileTypeErrorCallback(file);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Validate the file size against minimum and maximum allowed sizes\r\n      if (this.minFileSize !== undefined && file.size < this.minFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'minFileSize');\r\n        this.minFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n      if (this.maxFileSize !== undefined && file.size > this.maxFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'maxFileSize');\r\n        this.maxFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      // Apply a custom validator based on the file extension\r\n      if (fileExtension in this.validators && !await this.validators[fileExtension](file)) {\r\n        this.fire('fileProcessingFailed', file, 'validation');\r\n        this.fileValidationErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    const results = await Promise.all(validationPromises);\r\n\r\n    // Only include files that passed their validation tests\r\n    return files.filter((_v, index) => results[index]);\r\n  }\r\n\r\n  /**\r\n   * Add an array of files to this instance's file list by creating new ResumableFiles. This includes a validation and\r\n   * deduplication of the provided array.\r\n   * @param fileList An array containing File objects\r\n   * @param event The event with which the fileList was provided\r\n   */\r\n  private async appendFilesFromFileList(fileList: File[], event: Event): Promise<boolean> {\r\n    // check for uploading too many files\r\n    if (this.maxFiles !== undefined && this.maxFiles < fileList.length + this.files.length) {\r\n      // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\r\n      if (this.maxFiles === 1 && this.files.length === 1 && fileList.length === 1) {\r\n        this.removeFile(this.files[0]);\r\n      } else {\r\n        this.fire('fileProcessingFailed', undefined, 'maxFiles');\r\n        this.maxFilesErrorCallback(fileList);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Add the unique identifier for every new file.\r\n    // Since this might return a promise, we have to wait until it completed.\r\n    const filesWithUniqueIdentifiers = await Promise.all(fileList.map(async (file: ExtendedFile): Promise<ExtendedFile> => {\r\n      file.uniqueIdentifier = await this.generateUniqueIdentifier(file, event);\r\n      return file;\r\n    }));\r\n\r\n    // Validate the files and remove duplicates\r\n    const validatedFiles = await this.validateFiles(filesWithUniqueIdentifiers);\r\n\r\n    let skippedFiles = filesWithUniqueIdentifiers.filter((file) => !validatedFiles.includes(file));\r\n\r\n    for (const file of validatedFiles) {\r\n      let f = new ResumableFile(file, file.uniqueIdentifier, this.opts);\r\n      f.on('chunkSuccess', () => this.handleChunkSuccess());\r\n      f.on('chunkError', () => this.handleChunkError());\r\n      f.on('chunkCancel', () => this.handleChunkCancel());\r\n      f.on('fileProgress', (...args) => this.handleFileProgress(args));\r\n      f.on('fileError', (...args) => this.handleFileError(args));\r\n      f.on('fileSuccess', (...args) => this.handleFileSuccess(args));\r\n      f.on('fileCancel', (...args) => this.handleFileCancel(args));\r\n      f.on('fileRetry', () => this.handleFileRetry());\r\n      this.files.push(f);\r\n      this.fire('fileAdded', f, event);\r\n    }\r\n\r\n    // all files processed, trigger event\r\n    if (!validatedFiles.length && !skippedFiles.length) {\r\n      // no succeeded files, just skip\r\n      return;\r\n    }\r\n    this.fire('filesAdded', validatedFiles, skippedFiles);\r\n  }\r\n\r\n  /**\r\n   * Generate a new unique identifier for a given file either with a default helper function or with a custom\r\n   * generator function.\r\n   * @param file The file as an HTML 5 File object\r\n   * @param event The event with which the file was provided originally\r\n   */\r\n  private generateUniqueIdentifier(file: File, event: Event): string {\r\n    return typeof this._generateUniqueIdentifier === 'function' ?\r\n      this._generateUniqueIdentifier(file, event) : Helpers.generateUniqueIdentifier(file);\r\n  }\r\n\r\n  /**\r\n   * Queue a new chunk to be uploaded that is currently awaiting upload.\r\n   */\r\n  private uploadNextChunk(): void {\r\n    // In some cases (such as videos) it's really handy to upload the first\r\n    // and last chunk of a file quickly; this lets the server check the file's\r\n    // metadata and determine if there's even a point in continuing.\r\n    if (this.prioritizeFirstAndLastChunk) {\r\n      for (const file of this.files) {\r\n        if (file.chunks.length && file.chunks[0].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[0].send();\r\n          return;\r\n        }\r\n        if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[file.chunks.length - 1].send();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Now, simply look for the next best thing to upload\r\n    for (const file of this.files) {\r\n      if (file.upload()) return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  PUBLIC METHODS FOR RESUMABLE.JS\r\n   *  This section only includes methods that should be callable from external packages.\r\n   */\r\n\r\n  /**\r\n   * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\r\n   */\r\n  assignBrowse(domNodes: HTMLElement | HTMLElement[], isDirectory: boolean = false): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n    for (const domNode of domNodes) {\r\n      let input;\r\n      if (domNode instanceof HTMLInputElement && domNode.type === 'file') {\r\n        input = domNode;\r\n      } else {\r\n        input = document.createElement('input');\r\n        input.setAttribute('type', 'file');\r\n        input.style.display = 'none';\r\n        domNode.addEventListener('click', () => {\r\n          input.style.opacity = 0;\r\n          input.style.display = 'block';\r\n          input.focus();\r\n          input.click();\r\n          input.style.display = 'none';\r\n        }, false);\r\n        domNode.appendChild(input);\r\n      }\r\n      if (this.maxFiles !== 1) {\r\n        input.setAttribute('multiple', 'multiple');\r\n      } else {\r\n        input.removeAttribute('multiple');\r\n      }\r\n      if (isDirectory) {\r\n        input.setAttribute('webkitdirectory', 'webkitdirectory');\r\n      } else {\r\n        input.removeAttribute('webkitdirectory');\r\n      }\r\n      if (this.fileTypes.length >= 1) {\r\n        input.setAttribute('accept', this.fileTypes.map((type) => {\r\n          type = type.replace(/\\s/g, '').toLowerCase();\r\n          if (type.match(/^[^.][^/]+$/)) {\r\n            type = '.' + type;\r\n          }\r\n          return type;\r\n        }).join(','));\r\n      } else {\r\n        input.removeAttribute('accept');\r\n      }\r\n      // When new files are added, simply append them to the overall list\r\n      input.addEventListener('change', this.handleChangeEvent.bind(this), false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign one or more DOM nodes as a drop target.\r\n   */\r\n  assignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.addEventListener('dragover', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragenter', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragleave', this.onDragLeave.bind(this), false);\r\n      domNode.addEventListener('drop', this.onDrop.bind(this), false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove one or more DOM nodes as a drop target.\r\n   */\r\n  unAssignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.removeEventListener('dragover', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragenter', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragleave', this.onDragLeave.bind(this));\r\n      domNode.removeEventListener('drop', this.onDrop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether any files are currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.files.some((file) => file.isUploading);\r\n  }\r\n\r\n  /**\r\n   * Start or resume the upload of the provided files by initiating the upload of the first chunk\r\n   */\r\n  upload(): void {\r\n    // Make sure we don't start too many uploads at once\r\n    if (this.isUploading) return;\r\n    // Kick off the queue\r\n    this.fire('uploadStart');\r\n    for (let num = 1; num <= this.simultaneousUploads; num++) {\r\n      this.uploadNextChunk();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pause the upload\r\n   */\r\n  pause(): void {\r\n    // Resume all chunks currently being uploaded\r\n    for (const file of this.files) {\r\n      file.abort();\r\n    }\r\n    this.fire('pause');\r\n  };\r\n\r\n  /**\r\n   * Cancel uploading and reset all files to their initial states\r\n   */\r\n  cancel(): void {\r\n    this.fire('beforeCancel');\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      this.files[i].cancel();\r\n    }\r\n    this.fire('cancel');\r\n  };\r\n\r\n  /**\r\n   * Return the progress of the current upload as a float between 0 and 1\r\n   */\r\n  progress(): number {\r\n    let totalDone = this.files.reduce((accumulator, file) => accumulator + file.size * file.progress(), 0);\r\n    let totalSize = this.getSize();\r\n    return totalSize > 0 ? totalDone / totalSize : 0;\r\n  };\r\n\r\n  /**\r\n   * Add a HTML5 File object to the list of files.\r\n   */\r\n  addFile(file: File, event: Event): void {\r\n    this.appendFilesFromFileList([file], event);\r\n  };\r\n\r\n  /**\r\n   * Add a list of HTML5 File objects to the list of files.\r\n   */\r\n  addFiles(files: File[], event: Event): void {\r\n    this.appendFilesFromFileList(files, event);\r\n  };\r\n\r\n  /**\r\n   * Add a validator function for the given file type. This can e.g. be used to read the file and validate\r\n   * checksums based on certain properties.\r\n   * @param fileType The file extension for the given validator\r\n   * @param validator A callback function that should be called when validating files with the given type\r\n   */\r\n  addFileValidator(fileType: string, validator: Function): void {\r\n    if (fileType in this.validators) {\r\n      console.warn(`Overwriting validator for file type: ${fileType}`);\r\n    }\r\n    this.validators[fileType] = validator;\r\n  }\r\n\r\n  /**\r\n   * Cancel the upload of a specific ResumableFile object and remove it from the file list.\r\n   */\r\n  removeFile(file: ResumableFile): void {\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      if (this.files[i] === file) {\r\n        this.files.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve a ResumableFile object from the file list by its unique identifier.\r\n   */\r\n  getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile {\r\n    return this.files.find((file) => file.uniqueIdentifier === uniqueIdentifier);\r\n  };\r\n\r\n  /**\r\n   * Get the combined size of all files for the upload\r\n   */\r\n  getSize(): number {\r\n    return this.files.reduce((accumulator, file) => accumulator + file.size, 0);\r\n  }\r\n\r\n  /**\r\n   * Call the event handler when a file is dropped on the drag-and-drop area\r\n   */\r\n  handleDropEvent(e: DragEvent): void {\r\n    this.onDrop(e);\r\n  }\r\n  /**\r\n   * Call the event handler when the provided input element changes (i.e. receives one or multiple files.\r\n   */\r\n  handleChangeEvent(e: InputEvent): void {\r\n    const eventTarget = e.target as HTMLInputElement;\r\n    this.fire('fileProcessingBegin', eventTarget.files);\r\n    this.appendFilesFromFileList([...eventTarget.files as any], e);\r\n    if (this.clearInput) {\r\n      eventTarget.value = '';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether the upload is completed, i.e. if all files were uploaded successfully.\r\n   */\r\n  checkUploadComplete(): void {\r\n    let uploadCompleted = this.files.every((file) => file.isComplete);\r\n    if (uploadCompleted) {\r\n      // All chunks have been uploaded, complete\r\n      this.fire('complete');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handlers: This section should only include methods that are used to\r\n   * handle events coming from the files or chunks.\r\n   */\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkSuccess(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkError(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a chunk\r\n   */\r\n  private handleChunkCancel(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a file\r\n   */\r\n  private handleFileError(args: any[]): void {\r\n    this.fire('error', args[1], args[0]);\r\n  }\r\n\r\n  /**\r\n   * The event handler when all chunks from a file were uploaded successfully\r\n   */\r\n  private handleFileSuccess(args: any[]): void {\r\n    this.fire('fileSuccess', ...args);\r\n    this.checkUploadComplete();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a file progress event was received\r\n   */\r\n  private handleFileProgress(args: any[]): void {\r\n    this.fire('fileProgress', ...args);\r\n    this.fire('progress');\r\n  }\r\n\r\n  /**\r\n   * The event handler when the upload of a file was canceled\r\n   */\r\n  private handleFileCancel(args: any[]): void {\r\n    this.removeFile(args[0])\r\n  }\r\n\r\n  /**\r\n   * The event handler, when the retry of a file was initiated\r\n   */\r\n  private handleFileRetry(): void {\r\n    this.upload();\r\n  }\r\n}\r\n","import Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport ResumableFile from './resumableFile';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A file chunk that contains all the data that for a single upload request\r\n */\r\nexport default class ResumableChunk extends ResumableEventHandler {\r\n  private fileObj: ResumableFile;\r\n  private fileObjSize: number;\r\n  private fileObjType: string;\r\n  private offset: number;\r\n  private lastProgressCallback: Date = new Date;\r\n  private tested: boolean = false;\r\n  private retries: number = 0;\r\n  private pendingRetry: boolean = false;\r\n  private isMarkedComplete: boolean = false;\r\n  private loaded: number = 0;\r\n  private startByte: number;\r\n  private endByte: number;\r\n  private xhr: XMLHttpRequest = null;\r\n\r\n  // Option properties\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n  private fileParameterName: string = 'file';\r\n  chunkNumberParameterName: string = 'resumableChunkNumber';\r\n  chunkSizeParameterName: string = 'resumableChunkSize';\r\n  currentChunkSizeParameterName: string = 'resumableCurrentChunkSize';\r\n  totalSizeParameterName: string = 'resumableTotalSize';\r\n  typeParameterName: string = 'resumableType';\r\n  identifierParameterName: string = 'resumableIdentifier';\r\n  fileNameParameterName: string = 'resumableFilename';\r\n  relativePathParameterName: string = 'resumableRelativePath';\r\n  totalChunksParameterName: string = 'resumableTotalChunks';\r\n  throttleProgressCallbacks: number = 0.5;\r\n  query: object = {};\r\n  headers: object = {};\r\n  method: string = 'multipart';\r\n  uploadMethod: string = 'POST';\r\n  testMethod: string = 'GET';\r\n  parameterNamespace: string = '';\r\n  testChunks: boolean = true;\r\n  maxChunkRetries: number = 100;\r\n  chunkRetryInterval?: number = undefined;\r\n  permanentErrors: number[] = [400, 401, 403, 404, 409, 415, 500, 501];\r\n  withCredentials: boolean = false;\r\n  xhrTimeout: number = 0;\r\n  chunkFormat: string = 'blob';\r\n  setChunkTypeFromFile: boolean = false;\r\n  target: string = '/';\r\n  testTarget: string = '';\r\n\r\n\r\n  constructor(fileObj: ResumableFile, offset: number, options: ResumableConfiguration) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.fileObj = fileObj;\r\n    this.fileObjSize = fileObj.size;\r\n    this.fileObjType = fileObj.file.type;\r\n    this.offset = offset;\r\n\r\n    // Computed properties\r\n    this.startByte = this.offset * this.chunkSize;\r\n    this.endByte = Math.min(this.fileObjSize, (this.offset + 1) * this.chunkSize);\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration): void {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Set the header values for the current XMLHttpRequest\r\n   */\r\n  setCustomHeaders(): void {\r\n    if (!this.xhr) {\r\n      return;\r\n    }\r\n    let customHeaders = this.headers;\r\n    if (customHeaders instanceof Function) {\r\n      customHeaders = customHeaders(this.fileObj, this);\r\n    }\r\n    for (const header in customHeaders) {\r\n      if (!customHeaders.hasOwnProperty(header)) continue;\r\n      this.xhr.setRequestHeader(header, customHeaders[header]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get query parameters for this chunk as an object, combined with custom parameters if provided\r\n   */\r\n  get formattedQuery(): object {\r\n    var customQuery = this.query;\r\n    if (typeof customQuery == 'function') customQuery = customQuery(this.fileObj, this);\r\n\r\n    // Add extra data to identify chunk\r\n    const extraData = {\r\n      // define key/value pairs for additional parameters\r\n      [this.chunkNumberParameterName]: this.offset + 1,\r\n      [this.chunkSizeParameterName]: this.chunkSize,\r\n      [this.currentChunkSizeParameterName]: this.endByte - this.startByte,\r\n      [this.totalSizeParameterName]: this.fileObjSize,\r\n      [this.typeParameterName]: this.fileObjType,\r\n      [this.identifierParameterName]: this.fileObj.uniqueIdentifier,\r\n      [this.fileNameParameterName]: this.fileObj.fileName,\r\n      [this.relativePathParameterName]: this.fileObj.relativePath,\r\n      [this.totalChunksParameterName]: this.fileObj.chunks.length,\r\n    };\r\n    return {...extraData, ...customQuery};\r\n  }\r\n\r\n  /**\r\n   * Determine the status for this Chunk based on different parameters of the underlying XMLHttpRequest\r\n   */\r\n  get status(): ResumableChunkStatus {\r\n    if (this.pendingRetry) {\r\n      // if pending retry then that's effectively the same as actively uploading,\r\n      // there might just be a slight delay before the retry starts\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.isMarkedComplete) {\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (!this.xhr) {\r\n      return ResumableChunkStatus.PENDING;\r\n    } else if (this.xhr.readyState < 4) {\r\n      // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.xhr.status === 200 || this.xhr.status === 201) {\r\n      // HTTP 200, 201 (created)\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (this.permanentErrors.includes(this.xhr.status) || this.retries >= this.maxChunkRetries) {\r\n      // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\r\n      return ResumableChunkStatus.ERROR;\r\n    } else {\r\n      // this should never happen, but we'll reset and queue a retry\r\n      // a likely case for this would be 503 service unavailable\r\n      this.abort();\r\n      return ResumableChunkStatus.PENDING;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the target url for the specified request type and the configured parameters of this chunk\r\n   * @param requestType The type of the request, either 'test' or 'upload'\r\n   */\r\n  getTarget(requestType: string): string {\r\n    return Helpers.getTarget(requestType, this.target, this.testTarget, this.formattedQuery, this.parameterNamespace);\r\n  }\r\n\r\n  /**\r\n   * Makes a GET request without any data to see if the chunk has already been uploaded in a previous session\r\n   */\r\n  test(): void {\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    var testHandler = () => {\r\n      this.tested = true;\r\n      var status = this.status;\r\n      if (status === ResumableChunkStatus.SUCCESS) {\r\n        this.fire('chunkSuccess', this.message());\r\n      } else {\r\n        this.send();\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', testHandler, false);\r\n    this.xhr.addEventListener('error', testHandler, false);\r\n    this.xhr.addEventListener('timeout', testHandler, false);\r\n\r\n    // Append the relevant chunk and send it\r\n    this.xhr.open(this.testMethod, this.getTarget('test'));\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    this.xhr.send(null);\r\n  }\r\n\r\n  /**\r\n   * Abort and reset a request\r\n   */\r\n  abort(): void {\r\n    if (this.xhr) this.xhr.abort();\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   *  Uploads the actual data in a POST call\r\n   */\r\n  send(): void {\r\n    if (this.testChunks && !this.tested) {\r\n      this.test();\r\n      return;\r\n    }\r\n\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    // Progress\r\n    this.xhr.upload.addEventListener('progress', (e: ProgressEvent<XMLHttpRequestEventTarget>) => {\r\n      if (Date.now() - this.lastProgressCallback.getTime() > this.throttleProgressCallbacks * 1000) {\r\n        this.fire('chunkProgress');\r\n        this.lastProgressCallback = new Date();\r\n      }\r\n      this.loaded = e.loaded || 0;\r\n    }, false);\r\n    this.loaded = 0;\r\n    this.pendingRetry = false;\r\n    this.fire('chunkProgress');\r\n\r\n    /**\r\n     * Handles the different xhr events based on the status of this chunk\r\n     */\r\n    let doneHandler = () => {\r\n      var status = this.status;\r\n      switch (status) {\r\n        case ResumableChunkStatus.SUCCESS:\r\n        case ResumableChunkStatus.ERROR:\r\n          this.fire(status, this.message());\r\n          break;\r\n        default:\r\n          this.fire('chunkRetry', this.message());\r\n          this.abort();\r\n          this.retries++;\r\n          let retryInterval = this.chunkRetryInterval;\r\n          if (retryInterval !== undefined) {\r\n            this.pendingRetry = true;\r\n            setTimeout(this.send, retryInterval);\r\n          } else {\r\n            this.send();\r\n          }\r\n          break;\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', doneHandler, false);\r\n    this.xhr.addEventListener('error', doneHandler, false);\r\n    this.xhr.addEventListener('timeout', doneHandler, false);\r\n\r\n    // Set up the basic query data from Resumable\r\n    let bytes = this.fileObj.file.slice(this.startByte, this.endByte,\r\n      this.setChunkTypeFromFile ? this.fileObj.file.type : '');\r\n    let data = null;\r\n    let parameterNamespace = this.parameterNamespace;\r\n    // Add data from the query options\r\n    if (this.method === 'octet') {\r\n      data = bytes;\r\n    } else {\r\n      data = new FormData();\r\n      for (const queryKey in this.formattedQuery) {\r\n        data.append(parameterNamespace + queryKey, this.formattedQuery[queryKey]);\r\n      }\r\n      switch (this.chunkFormat) {\r\n        case 'blob':\r\n          data.append(parameterNamespace + this.fileParameterName, bytes, this.fileObj.fileName);\r\n          break;\r\n        case 'base64':\r\n          var fr = new FileReader();\r\n          fr.onload = () => {\r\n            data.append(parameterNamespace + this.fileParameterName, fr.result);\r\n            this.xhr.send(data);\r\n          };\r\n          fr.readAsDataURL(bytes);\r\n          break;\r\n      }\r\n    }\r\n\r\n    let target = this.getTarget('upload');\r\n\r\n    this.xhr.open(this.uploadMethod, target);\r\n    if (this.method === 'octet') {\r\n      this.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\r\n    }\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    if (this.chunkFormat === 'blob') {\r\n      this.xhr.send(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the response text of the underlying XMLHttpRequest if it exists\r\n   */\r\n  message(): string {\r\n    return this.xhr ? this.xhr.responseText : '';\r\n  };\r\n\r\n  /**\r\n   * Return the progress for the current chunk as a number between 0 and 1\r\n   * @param relative Whether or not the progress should be calculated based on the size of the entire file\r\n   */\r\n  progress(relative: boolean = false): number {\r\n    var factor = relative ? (this.endByte - this.startByte) / this.fileObjSize : 1;\r\n    if (this.pendingRetry) return 0;\r\n    if ((!this.xhr || !this.xhr.status) && !this.isMarkedComplete) factor *= .95;\r\n    switch (this.status) {\r\n      case ResumableChunkStatus.SUCCESS:\r\n      case ResumableChunkStatus.ERROR:\r\n        return factor;\r\n      case ResumableChunkStatus.PENDING:\r\n        return 0;\r\n      default:\r\n        return this.loaded / (this.endByte - this.startByte) * factor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark this chunk as completed because it was already uploaded to the server.\r\n   */\r\n  markComplete(): void {\r\n    this.isMarkedComplete = true;\r\n  }\r\n}\r\n","/**\r\n * The underlying base class for ResumableJS. This class is responsible for registering and executing\r\n * events and listeners.\r\n */\r\nexport default class ResumableEventHandler {\r\n  private registeredEventHandlers: { [event: string]: Function[]};\r\n\r\n  /**\r\n   * Construct a new event handler instance.\r\n   */\r\n  constructor() {\r\n    this.registeredEventHandlers = {};\r\n  }\r\n\r\n  /**\r\n   * Register a new callback for the given event.\r\n   */\r\n  on(event: string, callback: Function): void {\r\n    event = event.toLowerCase();\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) {\r\n      this.registeredEventHandlers[event] = [];\r\n    }\r\n    this.registeredEventHandlers[event].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Fire the event listeners for the given event with the given arguments as well as the wildcard event '*'\r\n   */\r\n  fire(event: string, ...args): void {\r\n    event = event.toLowerCase();\r\n\r\n    this.executeEventCallback(event, ...args);\r\n    this.executeEventCallback('*', event, ...args);\r\n  }\r\n\r\n  /**\r\n   * Execute all callbacks for the given event with the provided arguments. This function is only used internally\r\n   * to call all callbacks registered to a given event individually.\r\n   */\r\n  private executeEventCallback(event: string, ...args): void {\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) return;\r\n    this.registeredEventHandlers[event].forEach((callback) => callback(...args));\r\n  }\r\n}\r\n","import ResumableChunk from './resumableChunk';\r\nimport Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A single file object that should be uploaded in multiple chunks\r\n */\r\nexport default class ResumableFile extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private _prevProgress: number = 0;\r\n  private isPaused: boolean = false;\r\n\r\n  file: File;\r\n  fileName: string;\r\n  size: number;\r\n  relativePath: string;\r\n  uniqueIdentifier: string;\r\n  private _error: boolean;\r\n  chunks: ResumableChunk[] = [];\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n\r\n  constructor(file: File, uniqueIdentifier: string, options: object) {\r\n    super();\r\n    this.opts = options;\r\n    this.setInstanceProperties(options);\r\n    this.file = file;\r\n    this.fileName = file.name;\r\n    this.size = file.size;\r\n    this.relativePath = /*file.relativePath ||*/ file.webkitRelativePath || this.fileName;\r\n    this.uniqueIdentifier = uniqueIdentifier;\r\n    this._error = uniqueIdentifier !== undefined;\r\n\r\n    // Bootstrap file\r\n    this.fire('chunkingStart', this);\r\n    this.bootstrap();\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Stop current uploads for this file\r\n   */\r\n  abort(): void {\r\n    let abortCount = 0;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        abortCount++;\r\n      }\r\n    }\r\n    if (abortCount > 0) this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Cancel uploading this file and remove it from the file list\r\n   */\r\n  cancel(): void {\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        this.fire('chunkCancel', chunk);\r\n      }\r\n    }\r\n    // Reset this file to be void\r\n    this.chunks = [];\r\n    this.fire('fileCancel', this);\r\n    this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Retry uploading this file\r\n   */\r\n  retry(): void {\r\n    this.bootstrap();\r\n    let firedRetry = false;\r\n    this.on('chunkingComplete', () => {\r\n      if (!firedRetry) this.fire('fileRetry');\r\n      firedRetry = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Prepare this file for a new upload, by dividing it into multiple chunks\r\n   */\r\n  bootstrap(): void {\r\n    const progressHandler = (message) => this.fire('fileProgress', this, message);\r\n    const retryHandler = () =>  this.fire('fileRetry', this);\r\n    const successHandler = (message) => {\r\n      if (this._error) return;\r\n      this.fire('chunkSuccess');\r\n      this.fire('fileProgress', this, message); // it's at least progress\r\n      if (this.isComplete) {\r\n        this.fire('fileSuccess', this, message);\r\n      }\r\n    };\r\n    const errorHandler = (message) => {\r\n      this.fire('chunkError', message);\r\n      this.abort();\r\n      this._error = true;\r\n      this.chunks = [];\r\n      this.fire('fileError', this, message);\r\n    }\r\n\r\n    this.abort();\r\n    this._error = false;\r\n    // Rebuild stack of chunks from file\r\n    this.chunks = [];\r\n    this._prevProgress = 0;\r\n    const maxOffset = Math.max(Math.ceil(this.file.size / this.chunkSize), 1);\r\n    for (var offset = 0; offset < maxOffset; offset++) {\r\n      const chunk = new ResumableChunk(this, offset, this.opts);\r\n      chunk.on('chunkProgress', progressHandler);\r\n      chunk.on('chunkError', errorHandler);\r\n      chunk.on('chunkSuccess', successHandler);\r\n      chunk.on('chunkRetry', retryHandler);\r\n      this.chunks.push(chunk);\r\n      this.fire('chunkingProgress', this, offset / maxOffset);\r\n    }\r\n    this.fire('chunkingComplete', this);\r\n  }\r\n\r\n  /**\r\n   * Get the progress for uploading this file based on the progress of the individual file chunks\r\n   */\r\n  progress(): number {\r\n    if (this._error) return 1;\r\n    // Sum up progress across everything\r\n    var ret = 0;\r\n    var error = false;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.ERROR) error = true;\r\n      ret += chunk.progress(true); // get chunk progress relative to entire file\r\n    }\r\n    ret = error ? 1 : (ret > 0.99999 ? 1 : ret);\r\n    ret = Math.max(this._prevProgress, ret); // We don't want to lose percentages when an upload is paused\r\n    this._prevProgress = ret;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Check whether at least one of this file's chunks is currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.chunks.some((chunk) => chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Check whether all of this file's chunks completed their upload requests and whether it should be\r\n   * treated as completed.\r\n   */\r\n  get isComplete(): boolean {\r\n    return !this.chunks.some((chunk) =>\r\n      chunk.status === ResumableChunkStatus.PENDING || chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Initiate the upload of a new chunk for this file. This function returns whether a new upload was started or not.\r\n   */\r\n  upload(): boolean {\r\n    if (this.isPaused) {\r\n      return false;\r\n    }\r\n\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.PENDING) {\r\n        chunk.send();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Mark a given number of chunks as already uploaded to the server.\r\n   * @param chunkNumber The index until which all chunks should be marked as completed\r\n   */\r\n  markChunksCompleted(chunkNumber: number): void {\r\n    if (!this.chunks || this.chunks.length <= chunkNumber) {\r\n      return;\r\n    }\r\n    for (let num = 0; num < chunkNumber; num++) {\r\n      this.chunks[num].markComplete();\r\n    }\r\n  }\r\n}\r\n","// INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\r\nimport {ExtendedFile} from \"./types/types\";\r\n\r\nexport default class ResumableHelpers {\r\n  /**\r\n   * Stop the propagation and default behavior of the given event `e`.\r\n   */\r\n  static stopEvent(e: Event): void {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   * Generate a unique identifier for the given file based on its size, filename and relative path.\r\n   * @param {ExtendedFile} file The file for which the identifier should be generated\r\n   * @returns {string} The unique identifier for the given file object\r\n   */\r\n  static generateUniqueIdentifier(file: ExtendedFile): string {\r\n    let relativePath = file.webkitRelativePath || file.relativePath || file.name;\r\n    // The '/' is used to display the relative path of the file. This information should be preserved\r\n    relativePath = relativePath.replace('/', '-');\r\n    // Remove special characters\r\n    return (file.size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\r\n  }\r\n\r\n  /**\r\n   * Flatten the given array and all contained subarrays.\r\n   * Credit: {@link https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep}\r\n   */\r\n  static flattenDeep(array: any[]): any[] {\r\n    return Array.isArray(array)\r\n      ? array.reduce((a, b) => a.concat(this.flattenDeep(b)), [])\r\n      : [array];\r\n  }\r\n\r\n  /**\r\n   * Filter the given array based on the predicate inside `callback`\r\n   * and executes `errorCallback` for duplicate elements.\r\n   */\r\n  static uniqBy(array: any[], callback: Function, errorCallback: Function): any[] {\r\n    let seen = new Set();\r\n    return array.filter((item) => {\r\n      let k = callback(item);\r\n      if (seen.has(k)) {\r\n        errorCallback(item);\r\n        return false;\r\n      } else {\r\n        seen.add(k);\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format the size given in Bytes in a human readable format.\r\n   */\r\n  static formatSize(size: number): string {\r\n    if (size < 1024) {\r\n      return size + ' bytes';\r\n    }\r\n    if (size < 1024 * 1024) {\r\n      return (size / 1024.0).toFixed(0) + ' KB';\r\n    }\r\n    if (size < 1024 * 1024 * 1024) {\r\n      return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\r\n    }\r\n    return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\r\n  }\r\n\r\n  /**\r\n   * Get the target url for the specified request type and params\r\n   */\r\n  static getTarget(\r\n    requestType: string,\r\n    sendTarget: string,\r\n    testTarget: string,\r\n    params: object,\r\n    parameterNamespace: string = ''\r\n  ) {\r\n    let target = sendTarget;\r\n\r\n    if (requestType === 'test' && testTarget) {\r\n      target = testTarget === '/' ? sendTarget : testTarget;\r\n    }\r\n\r\n    let separator = target.indexOf('?') < 0 ? '?' : '&';\r\n    let joinedParams = Object.entries(params).map(([key, value]) => [\r\n      encodeURIComponent(parameterNamespace + key),\r\n      encodeURIComponent(value),\r\n    ].join('=')).join('&');\r\n\r\n    if (joinedParams) target = target + separator + joinedParams;\r\n\r\n    return target;\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(603);\n"],"names":["root","factory","exports","module","define","amd","this","Resumable","constructor","options","super","files","validators","clearInput","dragOverClass","fileTypes","fileTypeErrorCallback","file","alert","fileName","name","_generateUniqueIdentifier","maxFileSizeErrorCallback","formatSize","maxFileSize","maxFilesErrorCallback","maxFiles","minFileSize","minFileSizeErrorCallback","prioritizeFirstAndLastChunk","fileValidationErrorCallback","simultaneousUploads","setInstanceProperties","opts","checkSupport","support","undefined","File","Blob","FileList","prototype","slice","Error","Object","assign","map","type","replace","toLowerCase","mapDirectoryItemToFile","item","path","isFile","Promise","resolve","reject","relativePath","isDirectory","processDirectory","console","warn","mapDragItemToFile","entry","webkitGetAsEntry","getAsFile","directory","dirReader","createReader","allEntries","readEntries","entries","length","concat","all","onDrop","e","currentTarget","classList","remove","stopEvent","items","dataTransfer","fire","promises","flattenDeep","appendFilesFromFileList","onDragLeave","onDragOverEnter","preventDefault","dt","types","includes","stopPropagation","dropEffect","effectAllowed","add","validateFiles","validationPromises","uniqBy","uniqueIdentifier","some","addedFile","fileType","fileExtension","split","pop","substring","indexOf","size","results","filter","_v","index","fileList","event","removeFile","filesWithUniqueIdentifiers","generateUniqueIdentifier","validatedFiles","skippedFiles","f","on","handleChunkSuccess","handleChunkError","handleChunkCancel","args","handleFileProgress","handleFileError","handleFileSuccess","handleFileCancel","handleFileRetry","push","uploadNextChunk","chunks","status","send","upload","assignBrowse","domNodes","HTMLElement","domNode","input","HTMLInputElement","document","createElement","setAttribute","style","display","addEventListener","opacity","focus","click","appendChild","removeAttribute","match","join","handleChangeEvent","bind","assignDrop","unAssignDrop","removeEventListener","isUploading","num","pause","abort","cancel","i","progress","totalDone","reduce","accumulator","totalSize","getSize","addFile","addFiles","addFileValidator","validator","splice","getFromUniqueIdentifier","find","handleDropEvent","eventTarget","target","value","checkUploadComplete","every","isComplete","ResumableChunk","fileObj","offset","lastProgressCallback","Date","tested","retries","pendingRetry","isMarkedComplete","loaded","xhr","chunkSize","fileParameterName","chunkNumberParameterName","chunkSizeParameterName","currentChunkSizeParameterName","totalSizeParameterName","typeParameterName","identifierParameterName","fileNameParameterName","relativePathParameterName","totalChunksParameterName","throttleProgressCallbacks","query","headers","method","uploadMethod","testMethod","parameterNamespace","testChunks","maxChunkRetries","chunkRetryInterval","permanentErrors","withCredentials","xhrTimeout","chunkFormat","setChunkTypeFromFile","testTarget","fileObjSize","fileObjType","startByte","endByte","Math","min","setCustomHeaders","customHeaders","Function","header","hasOwnProperty","setRequestHeader","customQuery","extraData","readyState","getTarget","requestType","formattedQuery","test","XMLHttpRequest","testHandler","message","open","timeout","now","getTime","doneHandler","retryInterval","setTimeout","bytes","data","FormData","queryKey","append","fr","FileReader","onload","result","readAsDataURL","responseText","relative","factor","markComplete","registeredEventHandlers","callback","executeEventCallback","forEach","ResumableFile","_prevProgress","isPaused","webkitRelativePath","_error","bootstrap","abortCount","chunk","retry","firedRetry","progressHandler","retryHandler","successHandler","errorHandler","maxOffset","max","ceil","ret","error","markChunksCompleted","chunkNumber","array","Array","isArray","a","b","errorCallback","seen","Set","k","has","toFixed","sendTarget","params","separator","joinedParams","key","encodeURIComponent","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}