{"version":3,"file":"main.js","mappings":"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","sources":["webpack://resumablejs/webpack/universalModuleDefinition","webpack://resumablejs/./src/resumableHelpers.ts","webpack://resumablejs/./src/resumableFile.ts","webpack://resumablejs/./src/resumableChunk.ts","webpack://resumablejs/./src/resumableEventHandler.ts","webpack://resumablejs/webpack/bootstrap","webpack://resumablejs/webpack/runtime/define property getters","webpack://resumablejs/webpack/runtime/hasOwnProperty shorthand","webpack://resumablejs/webpack/runtime/make namespace object","webpack://resumablejs/./src/resumable.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"resumablejs\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"resumablejs\"] = factory();\n\telse\n\t\troot[\"resumablejs\"] = factory();\n})(this, function() {\nreturn ","// INTERNAL HELPER METHODS (handy, but ultimately not part of uploading)\r\nexport default class ResumableHelpers {\r\n  /**\r\n   * Stop the propagation and default behavior of the given event `e`.\r\n   */\r\n  static stopEvent(e: Event): void {\r\n    e.stopPropagation();\r\n    e.preventDefault();\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param file The file whose filename should be retrieved\r\n   */\r\n  static getFileNameFromFile(file: File): string {\r\n    return /*file.fileName ||*/ file.name;\r\n  }\r\n\r\n  /**\r\n   * Generate a unique identifier for the given file based on its size, filename and relative path.\r\n   * @param {File} file The file for which the identifier should be generated\r\n   * @returns {string} The unique identifier for the given file object\r\n   */\r\n  static generateUniqueIdentifier(file: File): string {\r\n    var relativePath = file.webkitRelativePath || /*file.relativePath ||*/ this.getFileNameFromFile(file);\r\n    var size = file.size;\r\n    return (size + '-' + relativePath.replace(/[^0-9a-zA-Z_-]/img, ''));\r\n  }\r\n\r\n  /**\r\n   * Flatten the given array and all contained subarrays.\r\n   * Credit: {@link https://github.com/you-dont-need/You-Dont-Need-Lodash-Underscore#_flattendeep}\r\n   */\r\n  static flattenDeep(array: any[]): any[] {\r\n    return Array.isArray(array)\r\n      ? array.reduce((a, b) => a.concat(this.flattenDeep(b)), [])\r\n      : [array];\r\n  }\r\n\r\n  /**\r\n   * Filter the given array based on the predicate inside `callback`\r\n   * and executes `errorCallback` for duplicate elements.\r\n   */\r\n  static uniqBy(array: any[], callback: Function, errorCallback: Function): any[] {\r\n    let seen = new Set();\r\n    return array.filter((item) => {\r\n      let k = callback(item);\r\n      if (seen.has(k)) {\r\n        errorCallback(item);\r\n        return false;\r\n      } else {\r\n        seen.add(k);\r\n        return true;\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Format the size given in Bytes in a human readable format.\r\n   */\r\n  static formatSize(size: number): string {\r\n    if (size < 1024) {\r\n      return size + ' bytes';\r\n    }\r\n    if (size < 1024 * 1024) {\r\n      return (size / 1024.0).toFixed(0) + ' KB';\r\n    }\r\n    if (size < 1024 * 1024 * 1024) {\r\n      return (size / 1024.0 / 1024.0).toFixed(1) + ' MB';\r\n    }\r\n    return (size / 1024.0 / 1024.0 / 1024.0).toFixed(1) + ' GB';\r\n  }\r\n\r\n  /**\r\n   * Get the target url for the specified request type and params\r\n   */\r\n  static getTarget(\r\n    requestType: string,\r\n    sendTarget: string,\r\n    testTarget: string,\r\n    params: object,\r\n    parameterNamespace: string = ''\r\n  ) {\r\n    let target = sendTarget;\r\n\r\n    if (requestType === 'test' && testTarget) {\r\n      target = testTarget === '/' ? sendTarget : testTarget;\r\n    }\r\n\r\n    let separator = target.indexOf('?') < 0 ? '?' : '&';\r\n    let joinedParams = Object.entries(params).map(([key, value]) => [\r\n      encodeURIComponent(parameterNamespace + key),\r\n      encodeURIComponent(value),\r\n    ].join('=')).join('&');\r\n\r\n    if (joinedParams) target = target + separator + joinedParams;\r\n\r\n    return target;\r\n  }\r\n}\r\n","import ResumableChunk from './resumableChunk';\r\nimport Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A single file object that should be uploaded in multiple chunks\r\n */\r\nexport default class ResumableFile extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private _prevProgress: number = 0;\r\n  private isPaused: boolean = false;\r\n\r\n  file: File;\r\n  fileName: string;\r\n  size: number;\r\n  relativePath: string;\r\n  uniqueIdentifier: string;\r\n  private _error: boolean;\r\n  chunks: ResumableChunk[] = [];\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n  private forceChunkSize: boolean = false;\r\n\r\n  constructor(file: File, uniqueIdentifier: string, options: object) {\r\n    super();\r\n    this.opts = options;\r\n    this.setInstanceProperties(options);\r\n    this.file = file;\r\n    this.fileName = Helpers.getFileNameFromFile(file);\r\n    this.size = file.size;\r\n    this.relativePath = /*file.relativePath ||*/ file.webkitRelativePath || this.fileName;\r\n    this.uniqueIdentifier = uniqueIdentifier;\r\n    this._error = uniqueIdentifier !== undefined;\r\n\r\n    // Bootstrap file\r\n    this.fire('chunkingStart', this);\r\n    this.bootstrap();\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Stop current uploads for this file\r\n   */\r\n  abort(): void {\r\n    let abortCount = 0;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        abortCount++;\r\n      }\r\n    }\r\n    if (abortCount > 0) this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Cancel uploading this file and remove it from the file list\r\n   */\r\n  cancel(): void {\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.UPLOADING) {\r\n        chunk.abort();\r\n        this.fire('chunkCancel', chunk);\r\n      }\r\n    }\r\n    // Reset this file to be void\r\n    this.chunks = [];\r\n    this.fire('fileCancel', this);\r\n    this.fire('fileProgress', this);\r\n  }\r\n\r\n  /**\r\n   * Retry uploading this file\r\n   */\r\n  retry(): void {\r\n    this.bootstrap();\r\n    let firedRetry = false;\r\n    this.on('chunkingComplete', () => {\r\n      if (!firedRetry) this.fire('fileRetry');\r\n      firedRetry = true;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Prepare this file for a new upload, by dividing it into multiple chunks\r\n   */\r\n  bootstrap(): void {\r\n    const progressHandler = (message) => this.fire('fileProgress', this, message);\r\n    const retryHandler = () =>  this.fire('fileRetry', this);\r\n    const successHandler = (message) => {\r\n      if (this._error) return;\r\n      this.fire('chunkSuccess');\r\n      this.fire('fileProgress', this, message); // it's at least progress\r\n      if (this.isComplete) {\r\n        this.fire('fileSuccess', this, message);\r\n      }\r\n    };\r\n    const errorHandler = (message) => {\r\n      this.fire('chunkError', message);\r\n      this.abort();\r\n      this._error = true;\r\n      this.chunks = [];\r\n      this.fire('fileError', this, message);\r\n    }\r\n\r\n    this.abort();\r\n    this._error = false;\r\n    // Rebuild stack of chunks from file\r\n    this.chunks = [];\r\n    this._prevProgress = 0;\r\n    const round = this.forceChunkSize ? Math.ceil : Math.floor;\r\n    const maxOffset = Math.max(round(this.file.size / this.chunkSize), 1);\r\n    for (var offset = 0; offset < maxOffset; offset++) {\r\n      const chunk = new ResumableChunk(this, offset, this.opts);\r\n      chunk.on('chunkProgress', progressHandler);\r\n      chunk.on('chunkError', errorHandler);\r\n      chunk.on('chunkSuccess', successHandler);\r\n      chunk.on('chunkRetry', retryHandler);\r\n      this.chunks.push(chunk);\r\n      this.fire('chunkingProgress', this, offset / maxOffset);\r\n    }\r\n    this.fire('chunkingComplete', this);\r\n  }\r\n\r\n  /**\r\n   * Get the progress for uploading this file based on the progress of the individual file chunks\r\n   */\r\n  progress(): number {\r\n    if (this._error) return 1;\r\n    // Sum up progress across everything\r\n    var ret = 0;\r\n    var error = false;\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.ERROR) error = true;\r\n      ret += chunk.progress(true); // get chunk progress relative to entire file\r\n    }\r\n    ret = error ? 1 : (ret > 0.99999 ? 1 : ret);\r\n    ret = Math.max(this._prevProgress, ret); // We don't want to lose percentages when an upload is paused\r\n    this._prevProgress = ret;\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Check whether at least one of this file's chunks is currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.chunks.some((chunk) => chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Check whether all of this file's chunks completed their upload requests and whether it should be\r\n   * treated as completed.\r\n   */\r\n  get isComplete(): boolean {\r\n    return !this.chunks.some((chunk) =>\r\n      chunk.status === ResumableChunkStatus.PENDING || chunk.status === ResumableChunkStatus.UPLOADING);\r\n  }\r\n\r\n  /**\r\n   * Initiate the upload of a new chunk for this file. This function returns whether a new upload was started or not.\r\n   */\r\n  upload(): boolean {\r\n    if (this.isPaused) {\r\n      return false;\r\n    }\r\n\r\n    for (const chunk of this.chunks) {\r\n      if (chunk.status === ResumableChunkStatus.PENDING) {\r\n        chunk.send();\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Mark a given number of chunks as already uploaded to the server.\r\n   * @param chunkNumber The index until which all chunks should be marked as completed\r\n   */\r\n  markChunksCompleted(chunkNumber: number): void {\r\n    if (!this.chunks || this.chunks.length <= chunkNumber) {\r\n      return;\r\n    }\r\n    for (let num = 0; num < chunkNumber; num++) {\r\n      this.chunks[num].markComplete();\r\n    }\r\n  }\r\n}\r\n","import Helpers from './resumableHelpers';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport ResumableFile from './resumableFile';\r\nimport {ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/**\r\n * A file chunk that contains all the data that for a single upload request\r\n */\r\nexport default class ResumableChunk extends ResumableEventHandler {\r\n  private fileObj: ResumableFile;\r\n  private fileObjSize: number;\r\n  private fileObjType: string;\r\n  private offset: number;\r\n  private lastProgressCallback: Date = new Date;\r\n  private tested: boolean = false;\r\n  private retries: number = 0;\r\n  private pendingRetry: boolean = false;\r\n  private isMarkedComplete: boolean = false;\r\n  private loaded: number = 0;\r\n  private startByte: number;\r\n  private endByte: number;\r\n  private xhr: XMLHttpRequest = null;\r\n\r\n  // Option properties\r\n  private chunkSize: number = 1024 * 1024; // 1 MB\r\n  private forceChunkSize: boolean = false;\r\n  private fileParameterName: string = 'file';\r\n  chunkNumberParameterName: string = 'resumableChunkNumber';\r\n  chunkSizeParameterName: string = 'resumableChunkSize';\r\n  currentChunkSizeParameterName: string = 'resumableCurrentChunkSize';\r\n  totalSizeParameterName: string = 'resumableTotalSize';\r\n  typeParameterName: string = 'resumableType';\r\n  identifierParameterName: string = 'resumableIdentifier';\r\n  fileNameParameterName: string = 'resumableFilename';\r\n  relativePathParameterName: string = 'resumableRelativePath';\r\n  totalChunksParameterName: string = 'resumableTotalChunks';\r\n  throttleProgressCallbacks: number = 0.5;\r\n  query: object = {};\r\n  headers: object = {};\r\n  method: string = 'multipart';\r\n  uploadMethod: string = 'POST';\r\n  testMethod: string = 'GET';\r\n  parameterNamespace: string = '';\r\n  testChunks: boolean = true;\r\n  maxChunkRetries: number = 100;\r\n  chunkRetryInterval?: number = undefined;\r\n  permanentErrors: number[] = [400, 401, 403, 404, 409, 415, 500, 501];\r\n  withCredentials: boolean = false;\r\n  xhrTimeout: number = 0;\r\n  chunkFormat: string = 'blob';\r\n  setChunkTypeFromFile: boolean = false;\r\n  target: string = '/';\r\n  testTarget: string = '';\r\n\r\n\r\n  constructor(fileObj: ResumableFile, offset: number, options: ResumableConfiguration) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.fileObj = fileObj;\r\n    this.fileObjSize = fileObj.size;\r\n    this.fileObjType = fileObj.file.type;\r\n    this.offset = offset;\r\n\r\n    // Computed properties\r\n    this.startByte = this.offset * this.chunkSize;\r\n    this.endByte = Math.min(this.fileObjSize, (this.offset + 1) * this.chunkSize);\r\n    if (this.fileObjSize - this.endByte < this.chunkSize && !this.forceChunkSize) {\r\n      // The last chunk will be bigger than the chunk size, but less than 2*chunkSize\r\n      this.endByte = this.fileObjSize;\r\n    }\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   * Set the options provided inside the configuration object on this instance\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration): void {\r\n    Object.assign(this, options);\r\n  }\r\n\r\n  /**\r\n   * Set the header values for the current XMLHttpRequest\r\n   */\r\n  setCustomHeaders(): void {\r\n    if (!this.xhr) {\r\n      return;\r\n    }\r\n    let customHeaders = this.headers;\r\n    if (customHeaders instanceof Function) {\r\n      customHeaders = customHeaders(this.fileObj, this);\r\n    }\r\n    for (const header in customHeaders) {\r\n      if (!customHeaders.hasOwnProperty(header)) continue;\r\n      this.xhr.setRequestHeader(header, customHeaders[header]);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get query parameters for this chunk as an object, combined with custom parameters if provided\r\n   */\r\n  get formattedQuery(): object {\r\n    var customQuery = this.query;\r\n    if (typeof customQuery == 'function') customQuery = customQuery(this.fileObj, this);\r\n\r\n    // Add extra data to identify chunk\r\n    const extraData = {\r\n      // define key/value pairs for additional parameters\r\n      [this.chunkNumberParameterName]: this.offset + 1,\r\n      [this.chunkSizeParameterName]: this.chunkSize,\r\n      [this.currentChunkSizeParameterName]: this.endByte - this.startByte,\r\n      [this.totalSizeParameterName]: this.fileObjSize,\r\n      [this.typeParameterName]: this.fileObjType,\r\n      [this.identifierParameterName]: this.fileObj.uniqueIdentifier,\r\n      [this.fileNameParameterName]: this.fileObj.fileName,\r\n      [this.relativePathParameterName]: this.fileObj.relativePath,\r\n      [this.totalChunksParameterName]: this.fileObj.chunks.length,\r\n    };\r\n    return {...extraData, ...customQuery};\r\n  }\r\n\r\n  /**\r\n   * Determine the status for this Chunk based on different parameters of the underlying XMLHttpRequest\r\n   */\r\n  get status(): ResumableChunkStatus {\r\n    if (this.pendingRetry) {\r\n      // if pending retry then that's effectively the same as actively uploading,\r\n      // there might just be a slight delay before the retry starts\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.isMarkedComplete) {\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (!this.xhr) {\r\n      return ResumableChunkStatus.PENDING;\r\n    } else if (this.xhr.readyState < 4) {\r\n      // Status is really 'OPENED', 'HEADERS_RECEIVED' or 'LOADING' - meaning that stuff is happening\r\n      return ResumableChunkStatus.UPLOADING;\r\n    } else if (this.xhr.status === 200 || this.xhr.status === 201) {\r\n      // HTTP 200, 201 (created)\r\n      return ResumableChunkStatus.SUCCESS;\r\n    } else if (this.permanentErrors.includes(this.xhr.status) || this.retries >= this.maxChunkRetries) {\r\n      // HTTP 400, 404, 409, 415, 500, 501 (permanent error)\r\n      return ResumableChunkStatus.ERROR;\r\n    } else {\r\n      // this should never happen, but we'll reset and queue a retry\r\n      // a likely case for this would be 503 service unavailable\r\n      this.abort();\r\n      return ResumableChunkStatus.PENDING;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Get the target url for the specified request type and the configured parameters of this chunk\r\n   * @param requestType The type of the request, either 'test' or 'upload'\r\n   */\r\n  getTarget(requestType: string): string {\r\n    return Helpers.getTarget(requestType, this.target, this.testTarget, this.formattedQuery, this.parameterNamespace);\r\n  }\r\n\r\n  /**\r\n   * Makes a GET request without any data to see if the chunk has already been uploaded in a previous session\r\n   */\r\n  test(): void {\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    var testHandler = () => {\r\n      this.tested = true;\r\n      var status = this.status;\r\n      if (status === ResumableChunkStatus.SUCCESS) {\r\n        this.fire('chunkSuccess', this.message());\r\n      } else {\r\n        this.send();\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', testHandler, false);\r\n    this.xhr.addEventListener('error', testHandler, false);\r\n    this.xhr.addEventListener('timeout', testHandler, false);\r\n\r\n    // Append the relevant chunk and send it\r\n    this.xhr.open(this.testMethod, this.getTarget('test'));\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    this.xhr.send(null);\r\n  }\r\n\r\n  /**\r\n   * Abort and reset a request\r\n   */\r\n  abort(): void {\r\n    if (this.xhr) this.xhr.abort();\r\n    this.xhr = null;\r\n  }\r\n\r\n  /**\r\n   *  Uploads the actual data in a POST call\r\n   */\r\n  send(): void {\r\n    if (this.testChunks && !this.tested) {\r\n      this.test();\r\n      return;\r\n    }\r\n\r\n    // Set up request and listen for event\r\n    this.xhr = new XMLHttpRequest();\r\n\r\n    // Progress\r\n    this.xhr.upload.addEventListener('progress', (e: ProgressEvent<XMLHttpRequestEventTarget>) => {\r\n      if (Date.now() - this.lastProgressCallback.getTime() > this.throttleProgressCallbacks * 1000) {\r\n        this.fire('chunkProgress');\r\n        this.lastProgressCallback = new Date();\r\n      }\r\n      this.loaded = e.loaded || 0;\r\n    }, false);\r\n    this.loaded = 0;\r\n    this.pendingRetry = false;\r\n    this.fire('chunkProgress');\r\n\r\n    /**\r\n     * Handles the different xhr registeredEventHandlers based on the status of this chunk\r\n     */\r\n    let doneHandler = () => {\r\n      var status = this.status;\r\n      switch (status) {\r\n        case ResumableChunkStatus.SUCCESS:\r\n        case ResumableChunkStatus.ERROR:\r\n          this.fire(status, this.message());\r\n          break;\r\n        default:\r\n          this.fire('chunkRetry', this.message());\r\n          this.abort();\r\n          this.retries++;\r\n          let retryInterval = this.chunkRetryInterval;\r\n          if (retryInterval !== undefined) {\r\n            this.pendingRetry = true;\r\n            setTimeout(this.send, retryInterval);\r\n          } else {\r\n            this.send();\r\n          }\r\n          break;\r\n      }\r\n    };\r\n    this.xhr.addEventListener('load', doneHandler, false);\r\n    this.xhr.addEventListener('error', doneHandler, false);\r\n    this.xhr.addEventListener('timeout', doneHandler, false);\r\n\r\n    // Set up the basic query data from Resumable\r\n    let bytes = this.fileObj.file.slice(this.startByte, this.endByte,\r\n      this.setChunkTypeFromFile ? this.fileObj.file.type : '');\r\n    let data = null;\r\n    let parameterNamespace = this.parameterNamespace;\r\n    // Add data from the query options\r\n    if (this.method === 'octet') {\r\n      data = bytes;\r\n    } else {\r\n      data = new FormData();\r\n      for (const queryKey in this.formattedQuery) {\r\n        data.append(parameterNamespace + queryKey, this.formattedQuery[queryKey]);\r\n      }\r\n      switch (this.chunkFormat) {\r\n        case 'blob':\r\n          data.append(parameterNamespace + this.fileParameterName, bytes, this.fileObj.fileName);\r\n          break;\r\n        case 'base64':\r\n          var fr = new FileReader();\r\n          fr.onload = () => {\r\n            data.append(parameterNamespace + this.fileParameterName, fr.result);\r\n            this.xhr.send(data);\r\n          };\r\n          fr.readAsDataURL(bytes);\r\n          break;\r\n      }\r\n    }\r\n\r\n    let target = this.getTarget('upload');\r\n\r\n    this.xhr.open(this.uploadMethod, target);\r\n    if (this.method === 'octet') {\r\n      this.xhr.setRequestHeader('Content-Type', 'application/octet-stream');\r\n    }\r\n    this.xhr.timeout = this.xhrTimeout;\r\n    this.xhr.withCredentials = this.withCredentials;\r\n    // Add data from header options\r\n    this.setCustomHeaders();\r\n\r\n    if (this.chunkFormat === 'blob') {\r\n      this.xhr.send(data);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return the response text of the underlying XMLHttpRequest if it exists\r\n   */\r\n  message(): string {\r\n    return this.xhr ? this.xhr.responseText : '';\r\n  };\r\n\r\n  /**\r\n   * Return the progress for the current chunk as a number between 0 and 1\r\n   * @param relative Whether or not the progress should be calculated based on the size of the entire file\r\n   */\r\n  progress(relative: boolean = false): number {\r\n    var factor = relative ? (this.endByte - this.startByte) / this.fileObjSize : 1;\r\n    if (this.pendingRetry) return 0;\r\n    if ((!this.xhr || !this.xhr.status) && !this.isMarkedComplete) factor *= .95;\r\n    switch (this.status) {\r\n      case ResumableChunkStatus.SUCCESS:\r\n      case ResumableChunkStatus.ERROR:\r\n        return factor;\r\n      case ResumableChunkStatus.PENDING:\r\n        return 0;\r\n      default:\r\n        return this.loaded / (this.endByte - this.startByte) * factor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Mark this chunk as completed because it was already uploaded to the server.\r\n   */\r\n  markComplete(): void {\r\n    this.isMarkedComplete = true;\r\n  }\r\n}\r\n","/**\r\n * The underlying base class for ResumableJS. This class is responsible for registering and executing\r\n * events and listeners.\r\n */\r\nexport default class ResumableEventHandler {\r\n  private registeredEventHandlers: { [event: string]: Function[]};\r\n\r\n  /**\r\n   * Construct a new event handler instance.\r\n   */\r\n  constructor() {\r\n    this.registeredEventHandlers = {};\r\n  }\r\n\r\n  /**\r\n   * Register a new callback for the given event.\r\n   */\r\n  on(event: string, callback: Function): void {\r\n    event = event.toLowerCase();\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) {\r\n      this.registeredEventHandlers[event] = [];\r\n    }\r\n    this.registeredEventHandlers[event].push(callback);\r\n  }\r\n\r\n  /**\r\n   * Fire the event listeners for the given event with the given arguments as well as the wildcard event '*'\r\n   */\r\n  fire(event: string, ...args): void {\r\n    event = event.toLowerCase();\r\n\r\n    this.executeEventCallback(event, ...args);\r\n    this.executeEventCallback('*', event, ...args);\r\n  }\r\n\r\n  /**\r\n   * Execute all callbacks for the given event with the provided arguments. This function is only used internally\r\n   * to call all callbacks registered to a given event individually.\r\n   */\r\n  private executeEventCallback(event: string, ...args): void {\r\n    if (!this.registeredEventHandlers.hasOwnProperty(event)) return;\r\n    this.registeredEventHandlers[event].forEach((callback) => callback(...args));\r\n  }\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import Helpers from './resumableHelpers';\r\nimport ResumableFile from './resumableFile';\r\nimport ResumableEventHandler from './resumableEventHandler';\r\nimport {ExtendedFile, ResumableChunkStatus, ResumableConfiguration} from './types/types';\r\n\r\n/*\r\n* MIT Licensed\r\n* http://www.twentythree.com/\r\n* http://github.com/23/resumable.js\r\n* Steffen Tiedemann Christensen, steffen@twentythree.com\r\n*/\r\n\r\n/**\r\n * An instance of a resumable upload handler that contains one or multiple files which should be uploaded in chunks.\r\n */\r\nexport class Resumable extends ResumableEventHandler {\r\n  private opts: ResumableConfiguration;\r\n  private files: ResumableFile[] = [];\r\n  private validators: {[fileType: string]: Function} = {};\r\n  private support: boolean;\r\n\r\n  // Configuration Options\r\n  clearInput: boolean = true;\r\n  dragOverClass: string = 'dragover';\r\n  fileTypes: string[] = [];\r\n  fileTypeErrorCallback: Function = (file) => {\r\n    alert(`${file.fileName || file.name} has an unsupported file type, please upload files of type ${this.fileTypes}.`);\r\n  };\r\n  _generateUniqueIdentifier: Function = null;\r\n  maxFileSize?: number;\r\n  maxFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too large, please upload files less than ' +\r\n      Helpers.formatSize(this.maxFileSize) + '.');\r\n  };\r\n  maxFiles?: number;\r\n  maxFilesErrorCallback: Function = (files) => {\r\n    var maxFiles = this.maxFiles;\r\n    alert('Please upload no more than ' + maxFiles + ' file' + (maxFiles === 1 ? '' : 's') + ' at a time.');\r\n  };\r\n  minFileSize: number = 1;\r\n  minFileSizeErrorCallback: Function = (file) => {\r\n    alert(file.fileName || file.name + ' is too small, please upload files larger than ' +\r\n      Helpers.formatSize(this.minFileSize) + '.');\r\n  };\r\n  prioritizeFirstAndLastChunk: boolean = false;\r\n  fileValidationErrorCallback: Function = (file) => {};\r\n  simultaneousUploads: number = 3;\r\n\r\n  constructor(options: ResumableConfiguration = {}) {\r\n    super();\r\n    this.setInstanceProperties(options);\r\n    this.opts = options;\r\n    this.checkSupport();\r\n  }\r\n\r\n  /**\r\n   * Check whether the current browser supports the essential functions for the package to work.\r\n   * The method checks if these features are supported:\r\n   * - File object type\r\n   * - Blob object type\r\n   * - FileList object type\r\n   * - slicing files\r\n   */\r\n  private checkSupport(): void {\r\n    this.support =\r\n      File !== undefined &&\r\n      Blob !== undefined &&\r\n      FileList !== undefined &&\r\n      !!Blob.prototype.slice;\r\n    if (!this.support) {\r\n      throw new Error('Not supported by Browser');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign the attributes of this instance via destructuring of the options object.\r\n   */\r\n  protected setInstanceProperties(options: ResumableConfiguration) {\r\n    Object.assign(this, options);\r\n\r\n    // For good behaviour we do some initial sanitizing. Remove spaces and dots and lowercase all\r\n    this.fileTypes = this.fileTypes.map((type) => type.replace(/[\\s.]/g, '').toLowerCase());\r\n  }\r\n\r\n  /**\r\n   * Transforms a single fileEntry or DirectoryEntry item into a list of File objects\r\n   * @param {Object} item item to upload, may be file or directory entry\r\n   * @param {string} path current file path\r\n   */\r\n  private async mapItemToFile(item: FileSystemEntry, path: string): Promise<File[]> {\r\n    if (item instanceof FileSystemFileEntry) {\r\n      // file entry provided\r\n      const file = await new Promise((resolve, reject) => item.file(resolve, reject)) as ExtendedFile;\r\n      file.relativePath = path + file.name;\r\n      return [file];\r\n    } else if (item instanceof FileSystemDirectoryEntry) {\r\n      return await this.processDirectory(item, path + item.name + '/');\r\n    } else if (item instanceof File) {\r\n      return [item];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Transforms a single DataTransfer item into a File object. This may include either extracting the given file or\r\n   * all files inside the provided directory.\r\n   * @param item item to upload, may be file or directory entry\r\n   * @param path current file path\r\n   */\r\n  private async mapDragItemToFile(item: DataTransferItem, path: string): Promise<File[]> {\r\n    let entry = item.webkitGetAsEntry();\r\n    if (entry instanceof FileSystemDirectoryEntry) {\r\n      return await this.processDirectory(entry, path + entry.name + '/');\r\n    }\r\n\r\n    let file = item.getAsFile();\r\n    if (file instanceof File) {\r\n      (file as ExtendedFile).relativePath = path + file.name;\r\n      return [file];\r\n    }\r\n\r\n    console.warn('Item mapping did not return a file object. This might be due to an unknown file type.')\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Recursively traverse a directory and collect files to upload\r\n   */\r\n  private processDirectory(directory: FileSystemDirectoryEntry, path: string): Promise<File[]> {\r\n    return new Promise((resolve, reject) => {\r\n      const dirReader = directory.createReader();\r\n      let allEntries = [];\r\n\r\n      const readEntries = (): void => {\r\n        dirReader.readEntries(async (entries: FileSystemEntry[]): Promise<void> => {\r\n          // Read the files batch-wise (in chrome e.g. 100 at a time)\r\n          if (entries.length) {\r\n            allEntries = allEntries.concat(entries);\r\n            return readEntries();\r\n          }\r\n\r\n          // After collecting all files, map all fileEntries to File objects\r\n          allEntries = allEntries.map((entry) => {\r\n            return this.mapItemToFile(entry, path);\r\n          });\r\n          // Wait until all files are collected.\r\n          resolve(await Promise.all(allEntries));\r\n        }, reject);\r\n      };\r\n\r\n      readEntries();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a new file was provided via drag-and-drop\r\n   */\r\n  private async onDrop(e: DragEvent): Promise<void> {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n    Helpers.stopEvent(e);\r\n\r\n    let items = [];\r\n\r\n    //handle dropped things as items if we can (this lets us deal with folders nicer in some cases)\r\n    if (e.dataTransfer && e.dataTransfer.items) {\r\n      items = Array.from(e.dataTransfer.items);\r\n    }\r\n    //else handle them as files\r\n    else if (e.dataTransfer && e.dataTransfer.files) {\r\n      items = Array.from(e.dataTransfer.files);\r\n    }\r\n\r\n    if (!items.length) {\r\n      return; // nothing to do\r\n    }\r\n    this.fire('fileProcessingBegin', items);\r\n    let promises = items.map((item) => this.mapDragItemToFile(item, ''));\r\n    let files = Helpers.flattenDeep(await Promise.all(promises));\r\n    if (files.length) {\r\n      // at least one file found\r\n      this.appendFilesFromFileList(files, e);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item leaves the area of assigned drag-and-drop area\r\n   */\r\n  private onDragLeave(e: DragEvent): void {\r\n    (e.currentTarget as HTMLElement).classList.remove(this.dragOverClass);\r\n  }\r\n\r\n  /**\r\n   * Handle the event when a drag-and-drop item enters the area of assigned drag-and-drop area\r\n   */\r\n  private onDragOverEnter(e: DragEvent): void {\r\n    e.preventDefault();\r\n    let dt = e.dataTransfer;\r\n    if (dt.types.includes('Files')) { // only for file drop\r\n      e.stopPropagation();\r\n      dt.dropEffect = 'copy';\r\n      dt.effectAllowed = 'copy';\r\n      (e.currentTarget as HTMLElement).classList.add(this.dragOverClass);\r\n    } else { // not work on IE/Edge....\r\n      dt.dropEffect = 'none';\r\n      dt.effectAllowed = 'none';\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Validate and clean a list of files. This includes the removal of duplicates, a check whether the file type is\r\n   * allowed and custom validation functions defined per file type.\r\n   * @param {ExtendedFile[]} files A list of File instances that were previously extended with a uniqueIdentifier\r\n   */\r\n  private async validateFiles(files: ExtendedFile[]): Promise<ExtendedFile[]> {\r\n    // Remove files that are duplicated in the original array, based on their unique identifiers\r\n    let uniqueFiles = Helpers.uniqBy(files,\r\n      (file) => file.uniqueIdentifier,\r\n      (file) => this.fire('fileProcessingFailed', file, 'duplicate'),\r\n    );\r\n\r\n    let validationPromises = uniqueFiles.map(async (file) => {\r\n      // Remove files that were already added based on their unique identifiers\r\n      if (this.files.some((addedFile) => addedFile.uniqueIdentifier === file.uniqueIdentifier)) {\r\n        this.fire('fileProcessingFailed', file, 'duplicate');\r\n        return false;\r\n      }\r\n\r\n      let fileType: string = file.type.toLowerCase();\r\n      let fileExtension = file.name.split('.').pop().toLowerCase();\r\n\r\n      if (this.fileTypes.length > 0) {\r\n        const fileTypeFound = this.fileTypes.some((type) => {\r\n          // Check whether the extension inside the filename is an allowed file type\r\n          return fileExtension === type ||\r\n            // If MIME type, check for wildcard or if extension matches the file's tile type\r\n            type.includes('/') && (\r\n              type.includes('*') &&\r\n              fileType.substring(0, type.indexOf('*')) === type.substring(0, type.indexOf('*')) ||\r\n              fileType === type\r\n            );\r\n        });\r\n        if (!fileTypeFound) {\r\n          this.fire('fileProcessingFailed', file, 'fileType');\r\n          this.fileTypeErrorCallback(file);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Validate the file size against minimum and maximum allowed sizes\r\n      if (this.minFileSize !== undefined && file.size < this.minFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'minFileSize');\r\n        this.minFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n      if (this.maxFileSize !== undefined && file.size > this.maxFileSize) {\r\n        this.fire('fileProcessingFailed', file, 'maxFileSize');\r\n        this.maxFileSizeErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      // Apply a custom validator based on the file extension\r\n      if (fileExtension in this.validators && !await this.validators[fileExtension](file)) {\r\n        this.fire('fileProcessingFailed', file, 'validation');\r\n        this.fileValidationErrorCallback(file);\r\n        return false;\r\n      }\r\n\r\n      return true;\r\n    });\r\n\r\n    const results = await Promise.all(validationPromises);\r\n\r\n    // Only include files that passed their validation tests\r\n    return files.filter((_v, index) => results[index]);\r\n  }\r\n\r\n  /**\r\n   * Add an array of files to this instance's file list by creating new ResumableFiles. This includes a validation and\r\n   * deduplication of the provided array.\r\n   * @param fileList An array containing File objects\r\n   * @param event The event with which the fileList was provided\r\n   */\r\n  private async appendFilesFromFileList(fileList: File[], event: Event): Promise<boolean> {\r\n    // check for uploading too many files\r\n    if (this.maxFiles !== undefined && this.maxFiles < fileList.length + this.files.length) {\r\n      // if single-file upload, file is already added, and trying to add 1 new file, simply replace the already-added file\r\n      if (this.maxFiles === 1 && this.files.length === 1 && fileList.length === 1) {\r\n        this.removeFile(this.files[0]);\r\n      } else {\r\n        this.fire('fileProcessingFailed', undefined, 'maxFiles');\r\n        this.maxFilesErrorCallback(fileList);\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // Add the unique identifier for every new file.\r\n    // Since this might return a promise, we have to wait until it completed.\r\n    const filesWithUniqueIdentifiers = await Promise.all(fileList.map(async (file: ExtendedFile): Promise<ExtendedFile> => {\r\n      file.uniqueIdentifier = await this.generateUniqueIdentifier(file, event);\r\n      return file;\r\n    }));\r\n\r\n    // Validate the files and remove duplicates\r\n    const validatedFiles = await this.validateFiles(filesWithUniqueIdentifiers);\r\n\r\n    let skippedFiles = filesWithUniqueIdentifiers.filter((file) => !validatedFiles.includes(file));\r\n\r\n    for (const file of validatedFiles) {\r\n      let f = new ResumableFile(file, file.uniqueIdentifier, this.opts);\r\n      f.on('chunkSuccess', () => this.handleChunkSuccess());\r\n      f.on('chunkError', () => this.handleChunkError());\r\n      f.on('chunkCancel', () => this.handleChunkCancel());\r\n      f.on('fileProgress', () => this.handleFileProgress());\r\n      f.on('fileError', (...args) => this.handleFileError(args));\r\n      f.on('fileSuccess', (...args) => this.handleFileSuccess(args));\r\n      f.on('fileCancel', (...args) => this.handleFileCancel(args));\r\n      f.on('fileRetry', () => this.handleFileRetry());\r\n      this.files.push(f);\r\n      this.fire('fileAdded', f, event);\r\n    }\r\n\r\n    // all files processed, trigger event\r\n    if (!validatedFiles.length && !skippedFiles.length) {\r\n      // no succeeded files, just skip\r\n      return;\r\n    }\r\n    this.fire('filesAdded', validatedFiles, skippedFiles);\r\n  }\r\n\r\n  /**\r\n   * Generate a new unique identifier for a given file either with a default helper function or with a custom\r\n   * generator function.\r\n   * @param file The file as an HTML 5 File object\r\n   * @param event The event with which the file was provided originally\r\n   */\r\n  private generateUniqueIdentifier(file: File, event: Event): string {\r\n    return typeof this._generateUniqueIdentifier === 'function' ?\r\n      this._generateUniqueIdentifier(file, event) : Helpers.generateUniqueIdentifier(file);\r\n  }\r\n\r\n  /**\r\n   * Queue a new chunk to be uploaded that is currently awaiting upload.\r\n   */\r\n  private uploadNextChunk(): void {\r\n    // In some cases (such as videos) it's really handy to upload the first\r\n    // and last chunk of a file quickly; this lets the server check the file's\r\n    // metadata and determine if there's even a point in continuing.\r\n    if (this.prioritizeFirstAndLastChunk) {\r\n      for (const file of this.files) {\r\n        if (file.chunks.length && file.chunks[0].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[0].send();\r\n          return;\r\n        }\r\n        if (file.chunks.length > 1 && file.chunks[file.chunks.length - 1].status === ResumableChunkStatus.PENDING) {\r\n          file.chunks[file.chunks.length - 1].send();\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Now, simply look for the next best thing to upload\r\n    for (const file of this.files) {\r\n      if (file.upload()) return;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  PUBLIC METHODS FOR RESUMABLE.JS\r\n   *  This section only includes methods that should be callable from external packages.\r\n   */\r\n\r\n  /**\r\n   * Assign a browse action to one or more DOM nodes. Pass in true to allow directories to be selected (Chrome only).\r\n   */\r\n  assignBrowse(domNodes: HTMLInputElement | HTMLInputElement[], isDirectory: boolean = false): void {\r\n    if (domNodes instanceof HTMLInputElement) domNodes = [domNodes];\r\n    for (const domNode of domNodes) {\r\n      let input;\r\n      if (domNode.tagName === 'INPUT' && domNode.type === 'file') {\r\n        input = domNode;\r\n      } else {\r\n        input = document.createElement('input');\r\n        input.setAttribute('type', 'file');\r\n        input.style.display = 'none';\r\n        domNode.addEventListener('click', () => {\r\n          input.style.opacity = 0;\r\n          input.style.display = 'block';\r\n          input.focus();\r\n          input.click();\r\n          input.style.display = 'none';\r\n        }, false);\r\n        domNode.appendChild(input);\r\n      }\r\n      if (this.maxFiles !== 1) {\r\n        input.setAttribute('multiple', 'multiple');\r\n      } else {\r\n        input.removeAttribute('multiple');\r\n      }\r\n      if (isDirectory) {\r\n        input.setAttribute('webkitdirectory', 'webkitdirectory');\r\n      } else {\r\n        input.removeAttribute('webkitdirectory');\r\n      }\r\n      if (this.fileTypes.length >= 1) {\r\n        input.setAttribute('accept', this.fileTypes.map((type) => {\r\n          type = type.replace(/\\s/g, '').toLowerCase();\r\n          if (type.match(/^[^.][^/]+$/)) {\r\n            type = '.' + type;\r\n          }\r\n          return type;\r\n        }).join(','));\r\n      } else {\r\n        input.removeAttribute('accept');\r\n      }\r\n      // When new files are added, simply append them to the overall list\r\n      input.addEventListener('change', (e: InputEvent) => {\r\n        const eventTarget = e.target as HTMLInputElement;\r\n        this.fire('fileProcessingBegin', eventTarget.files);\r\n        this.appendFilesFromFileList(Array.from(eventTarget.files), e);\r\n        if (this.clearInput) {\r\n          eventTarget.value = '';\r\n        }\r\n      }, false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Assign one or more DOM nodes as a drop target.\r\n   */\r\n  assignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.addEventListener('dragover', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragenter', this.onDragOverEnter.bind(this), false);\r\n      domNode.addEventListener('dragleave', this.onDragLeave.bind(this), false);\r\n      domNode.addEventListener('drop', this.onDrop.bind(this), false);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove one or more DOM nodes as a drop target.\r\n   */\r\n  unAssignDrop(domNodes: HTMLElement | HTMLElement[]): void {\r\n    if (domNodes instanceof HTMLElement) domNodes = [domNodes];\r\n\r\n    for (const domNode of domNodes) {\r\n      domNode.removeEventListener('dragover', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragenter', this.onDragOverEnter.bind(this));\r\n      domNode.removeEventListener('dragleave', this.onDragLeave.bind(this));\r\n      domNode.removeEventListener('drop', this.onDrop.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether any files are currently uploading\r\n   */\r\n  get isUploading(): boolean {\r\n    return this.files.some((file) => file.isUploading);\r\n  }\r\n\r\n  /**\r\n   * Start or resume the upload of the provided files by initiating the upload of the first chunk\r\n   */\r\n  upload(): void {\r\n    // Make sure we don't start too many uploads at once\r\n    if (this.isUploading) return;\r\n    // Kick off the queue\r\n    this.fire('uploadStart');\r\n    for (let num = 1; num <= this.simultaneousUploads; num++) {\r\n      this.uploadNextChunk();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Pause the upload\r\n   */\r\n  pause(): void {\r\n    // Resume all chunks currently being uploaded\r\n    for (const file of this.files) {\r\n      file.abort();\r\n    }\r\n    this.fire('pause');\r\n  };\r\n\r\n  /**\r\n   * Cancel uploading and reset all files to their initial states\r\n   */\r\n  cancel(): void {\r\n    this.fire('beforeCancel');\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      this.files[i].cancel();\r\n    }\r\n    this.fire('cancel');\r\n  };\r\n\r\n  /**\r\n   * Return the progress of the current upload as a float between 0 and 1\r\n   */\r\n  progress(): number {\r\n    let totalDone = this.files.reduce((accumulator, file) => accumulator + file.size * file.progress(), 0);\r\n    let totalSize = this.getSize();\r\n    return totalSize > 0 ? totalDone / totalSize : 0;\r\n  };\r\n\r\n  /**\r\n   * Add a HTML5 File object to the list of files.\r\n   */\r\n  addFile(file: File, event: Event): void {\r\n    this.appendFilesFromFileList([file], event);\r\n  };\r\n\r\n  /**\r\n   * Add a list of HTML5 File objects to the list of files.\r\n   */\r\n  addFiles(files: File[], event: Event): void {\r\n    this.appendFilesFromFileList(files, event);\r\n  };\r\n\r\n  /**\r\n   * Add a validator function for the given file type. This can e.g. be used to read the file and validate\r\n   * checksums based on certain properties.\r\n   * @param fileType The file extension for the given validator\r\n   * @param validator A callback function that should be called when validating files with the given type\r\n   */\r\n  addFileValidator(fileType: string, validator: Function): void {\r\n    if (fileType in this.validators) {\r\n      console.warn(`Overwriting validator for file type: ${fileType}`);\r\n    }\r\n    this.validators[fileType] = validator;\r\n  }\r\n\r\n  /**\r\n   * Cancel the upload of a specific ResumableFile object and remove it from the file list.\r\n   */\r\n  removeFile(file: ResumableFile): void {\r\n    for (let i = this.files.length - 1; i >= 0; i--) {\r\n      if (this.files[i] === file) {\r\n        this.files.splice(i, 1);\r\n        break;\r\n      }\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Retrieve a ResumableFile object from the file list by its unique identifier.\r\n   */\r\n  getFromUniqueIdentifier(uniqueIdentifier: string): ResumableFile {\r\n    return this.files.find((file) => file.uniqueIdentifier === uniqueIdentifier);\r\n  };\r\n\r\n  /**\r\n   * Get the combined size of all files for the upload\r\n   */\r\n  getSize(): number {\r\n    return this.files.reduce((accumulator, file) => accumulator + file.size, 0);\r\n  }\r\n\r\n  /**\r\n   * Call the event handler when a file is dropped on the drag-and-drop area\r\n   */\r\n  handleDropEvent(e: DragEvent): void {\r\n    this.onDrop(e);\r\n  }\r\n  /**\r\n   * Call the event handler when the provided input element changes (i.e. receives one or multiple files.\r\n   */\r\n  handleChangeEvent(e: InputEvent): void {\r\n    this.appendFilesFromFileList(Array.from((e.target as HTMLInputElement).files), e);\r\n    (e.target as HTMLInputElement).value = '';\r\n  }\r\n\r\n  /**\r\n   * Check whether the upload is completed, i.e. if all files were uploaded successfully.\r\n   */\r\n  checkUploadComplete(): void {\r\n    let uploadCompleted = this.files.every((file) => file.isComplete);\r\n    if (uploadCompleted) {\r\n      // All chunks have been uploaded, complete\r\n      this.fire('complete');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Event Handlers: This section should only include methods that are used to\r\n   * handle events coming from the files or chunks.\r\n   */\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkSuccess(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a chunk was uploaded successfully\r\n   */\r\n  private handleChunkError(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a chunk\r\n   */\r\n  private handleChunkCancel(): void {\r\n    this.uploadNextChunk();\r\n  }\r\n\r\n  /**\r\n   * The event handler when an error occurred during the upload of a file\r\n   */\r\n  private handleFileError(args: any[]): void {\r\n    this.fire('error', args[1], args[0]);\r\n  }\r\n\r\n  /**\r\n   * The event handler when all chunks from a file were uploaded successfully\r\n   */\r\n  private handleFileSuccess(args: any[]): void {\r\n    this.fire('fileSuccess', ...args);\r\n    this.checkUploadComplete();\r\n  }\r\n\r\n  /**\r\n   * The event handler when a file progress event was received\r\n   */\r\n  private handleFileProgress(): void {\r\n    this.fire('progress');\r\n  }\r\n\r\n  /**\r\n   * The event handler when the upload of a file was canceled\r\n   */\r\n  private handleFileCancel(args: any[]): void {\r\n    this.removeFile(args[0])\r\n  }\r\n\r\n  /**\r\n   * The event handler, when the retry of a file was initiated\r\n   */\r\n  private handleFileRetry(): void {\r\n    this.upload();\r\n  }\r\n}\r\n"],"names":[],"sourceRoot":""}